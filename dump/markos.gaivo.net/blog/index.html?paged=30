<!DOCTYPE html>
<html lang="en">
<head>
	<title>A notch above a monkey</title>
	<meta charset="utf-8" />
	
	<meta name="viewport" content="width=device-width, initial-scale=1.0" /> 

	<link rel="shortcut icon" href="/img/markos.ico" />
	
	<meta name="generator" content="WordPress 3.0.5" /> <!-- leave this for stats please -->

	<link href="http://fast.fonts.com/cssapi/aee9b60b-8e94-47f8-b586-3ecbfab51d1c.css" rel="stylesheet" type="text/css" />
	<link rel="stylesheet" type="text/css" href="css/home.css" media="screen" title="Light theme" />
	<link rel="alternate stylesheet" type="text/css" href="css/home_dark.css" media="screen" title="Dark theme" />
	<link rel="stylesheet" href="css/ipad.css" media="only screen and (min-device-width : 768px) and (max-device-width : 1024px)">
	<link rel="stylesheet" type="text/css" href="css/smallscreen.css" media="only screen and (max-width: 700px)" />

	<link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://markos.gaivo.net/blog/?feed=rss2" />
	<link rel="alternate" type="application/atom+xml" title="Atom 1.0" href="http://markos.gaivo.net/blog/?feed=atom" />
	<link rel='canonical' href='http://markos.gaivo.net/blog/?p=664' />

	<link rel="pingback" href="http://markos.gaivo.net/blog/xmlrpc.php" />

	<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://markos.gaivo.net/blog/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://markos.gaivo.net/blog/wp-includes/wlwmanifest.xml" /> 
<link rel='index' title='A notch above a monkey' href='http://markos.gaivo.net/blog' />
<meta name="generator" content="WordPress 3.0.5" />

	<!--[if lt IE 9]>
	<script src="/js/html5.js"></script>
	<![endif]-->
</head>
<body>
	<section class="envelope posts">
		<header>
			<h1><a href="http://markos.gaivo.net/blog/">A notch above a monkey</a></h1>
		</header>
		<nav class="colophon">
			<h1>By Marko Samastur</h1>
			<ul>
				<li><a href="/">About me</a></li>
				<li><a href="http://markos.gaivo.net/blog/?feed=atom">Subscribe</a></li>
			</ul>
		</nav>

	
		<article>
			<h1 class="storytitle"><a href="http://markos.gaivo.net/blog/?p=254" rel="bookmark">Blog upgrade</a></h1>

			<div class="post-text">
				<p>I have finally upgraded my blog from 1.5 to 2.5.1, which went quite smoothly. If I knew it was going to be this easy, I would have done it a long time ago and save myself some work. I had no idea so much crap was secretly posted to the blog and if you find more or anything else that has stopped working, please let me know.</p>
<p>I would also welcome a tip from fellow wordpress users on how to turn rich-text editing on. It&#8217;s hard to imagine that it simply doesn&#8217;t exist.</p>
			</div>

			<footer class="post-metadata">
				<ul>
					<li>Published on <time datetime="2008-04-26T17:51:53+00:00">April 26, 2008</time></li>
					<li><a href="http://markos.gaivo.net/blog/?p=254#comments" title="Comment on Blog upgrade">Add your comment</a> </li>
				</ul>
			</footer>
		</article>
	
		<article>
			<h1 class="storytitle"><a href="http://markos.gaivo.net/blog/?p=253" rel="bookmark">All code is crap</a></h1>

			<div class="post-text">
				<p>I was recently discussing how I think all code, especially mine, is crap and since this position has been and likely still is controversial, it might not be a bad idea to discuss it a bit more. This likely won&#8217;t avoid grievances and disputes, but it might save me some work in explaining myself.</p>
<p>I&#8217;ve never written a non-trivial amount of code that I wouldn&#8217;t find at least a bit embarrassing two years later. Partly because of my own deficiencies as a programmer, partly because our craft evolves and does so rather speedily. Even if I was as good a programmer as I would like to be, our profession would still develop and my code would eventually become crap. It would just take a bit longer than it does now. In a way, with maybe few exceptions, all code <em>left alone</em> is on natural trajectory to a state of crappiness.</p>
<p>Personally I don&#8217;t find this insulting. If anything I would be terrified to discover that my old code doesn&#8217;t bug me at all. I would see it as a signal that I haven&#8217;t developed my craft much in this time. <strong>You haven&#8217;t peaked until you stagnated</strong>.</p>
<p>There are also other benefits to this position. Since I find my code at least a bit dubious, I&#8217;m not enamored with it to the point, where I would find it difficult to ditch it if need be. It helps me being more detached and rational about its merits or lack thereof.</p>
<p>In contrast with what I just said, it also helps me from scraping it too soon. Accepting that some level of crappiness is a given, I don&#8217;t feel as much need in reformatting, refactoring or rewriting code that offends my sensibilities. I like reading pretty or even inspirational code as much as the next programmer, but esthetics are not too important. As long as code is functional, bug-scarce, maintainable and generally usable enough, it&#8217;s also pretty enough.</p>
<p>So if you happen to hear me insensitively remarking that some code is crap, please try to keep in mind that my completely universal belief means it&#8217;s not meant to be personal or even negative. I likely regard your code and skill higher than mine. I am truly sorry, if you nevertheless feel bad about it.</p>
			</div>

			<footer class="post-metadata">
				<ul>
					<li>Published on <time datetime="2008-04-16T12:42:04+00:00">April 16, 2008</time></li>
					<li><a href="http://markos.gaivo.net/blog/?p=253#comments" title="Comment on All code is crap">Add your comment</a> </li>
				</ul>
			</footer>
		</article>
	
		<article>
			<h1 class="storytitle"><a href="http://markos.gaivo.net/blog/?p=252" rel="bookmark">Debugging Javascript applications</a></h1>

			<div class="post-text">
				<p>Debugging web applications used to be simple. You generated a page and sent it to client. Visitors performed actions and you got back their response. Since filling a form was practically the most complicated action they could perform, it was relatively easy to find bugs if you were smart enough to include debugging support on server. You just had to trace user&#8217;s steps to find the one where things went amiss.</p>
<p>Javascript heavy applications changed that. Now a lot of action is happening far from your eyes and even when application does communicate with a server, it might just be a request to store or fetch more data without any hints about what&#8217;s happening over there. That&#8217;s fine and we are all happy as long as everything works. Too bad that sooner or later it usually doesn&#8217;t.</p>
<p>That&#8217;s why I decided to write a simple debugging support I can plug in my older projects that I still need to support and use in any upcoming ones that could benefit from it.</p>
<p><strong>Goals</strong></p>
<p>I want my script to have the following characteristics:</p>
<ul>
<li>be short and simple enough so I can rely on it not to be a cause of new problems</li>
<li>it can be triggered through Javascript or by manipulating URL</li>
<li>adaptable to different scenarios</li>
<li>it avoids unnecessary replication by supporting Firebug&#8217;s logging calls</li>
</ul>
<p>Point two in the list means I should have a choice between automatic start of debugging by changing URL a bit or through Javascript at the time of my liking. This way I&#8217;m free to choose the best way and moment to debug my application.</p>
<p>By adaptable I mean I have free hands when it comes to how much gets logged, how far back do I keep logs and how does that information get sent to me.</p>
<p>Supporting Firebug means that its logging calls are used. So same debugging calls that might have been used during development can also be used for debugging problems in deployed site and don&#8217;t bother script execution in non-debug mode.</p>
<p><strong>Implementation</strong></p>
<p>Here&#8217;s <a href="http://markos.gaivo.net/blog/code/debug.js" title="Javascript debugging module">result</a>, packed in around 100 lines of code. It should be included at the top of your Javascript code or as quickly as you&#8217;d like to use it. I think it&#8217;s pretty self-explanatory, but you can also look at demonstration page described a bit later.</p>
<p>Debugging is stored in an object <em>window.console</em> and gets started by either including <em>dbg=true</em> parameter in URL or calling <em>window.console.debugStart</em> method. In later case you can provide the method with a function as first parameter that gets called on Javascript error or when we stop debugging with a call of <em>window.console.debugEnd</em>.</p>
<p>We can provide the same function by assigning it to <em>window.console.debugDisplay</em>. It gets called the same way with one parameter of an array of debugging messages. It&#8217;s completely up to it to decide what to do with that information and what value to return, but return values have the same meaning as they have in <em>window.onerror</em> handler. If processing Javascript error, <em>true</em> means that error was processed and script can continue and <em>false</em> will lead to error message dialog box.</p>
<p><em>window.console.debugStart</em> can also receive a parameter object with attributes <em>level</em>, <em>count</em> and <em>callback</em> for debugging level, number of saved messages and <em>debugDisplay</em> function respectively. Level and message count can also be set through URL by providing parameters <em>dbglevel</em> and <em>dbgcount</em>.</p>
<p><strong>Demo</strong></p>
<p>You can see final result called in two ways. Using <a href="http://markos.gaivo.net/blog/code/debug.html?dbg=true&amp;dbglevel=3&amp;dbgcount=10" title="URL based debugging">modified URL</a>, where debugging parameters are set through URL, and <a href="http://markos.gaivo.net/blog/code/debug.html" title="non-URL based debugging">the one</a>, where debugging isn&#8217;t turned on by default. It&#8217;s same page in both cases and so is mostly its behavior.</p>
<p>In first case we start fetching debugging messages immediately and display them with a press on <strong>End debugging</strong>. We can&#8217;t restart debugging in this scenario, but we can in second case.</p>
<p>In second case we start and continue debugging with a press on <strong>Start debugging</strong> button, that got displayed in the first place because <em>window.console.on</em> was set to <em>false</em>. <em>window.console.on</em> is a <em>Boolean</em> that shows if debugging is currently turned on or off.</p>
<p>In both cases only messages of requested levels get saved.</p>
<p><strong>Discussion</strong></p>
<p>Even though I tried to leave things as open to extending as possible, I mainly tried to cover use cases I already encountered. Therefore this script, as it is, doesn&#8217;t support graceful handling of browser crashes, which it could, if it saved debug information to local storage when available.</p>
<p>Script also doesn&#8217;t support loading different libraries in debug mode. That is, if you want to load libraries stripped of debugging calls when not debugging, you can do that yourself, using <em>window.console.on</em>. This script won&#8217;t do it for you.</p>
<p>I do provide a skeleton <em>debugDisplay</em> in case you don&#8217;t provide one yourself. If you don&#8217;t, then debug message gets displayed using <em>alert</em>, which makes it hard to copy and paste, but easy enough to make a screenshot of. Setting debugging level is probably not as nice as it could be too.</p>
<p>It&#8217;s not completely stupid though, takes note of <em>Array</em> object&#8217;s suitability mainly for sparse and small arrays and should perform adequately when it comes to memory consumption even with new IE8 as long as count parameter isn&#8217;t too big.</p>
<p>At the end, it&#8217;s a piece of code as any I&#8217;ve written. Bugs are likely, so bug reports would be appreciated. Same goes for ideas and suggestions. If you need it, feel free to use it any way you want, but I would appreciate a ping just to see where my stuff ends up.</p>
			</div>

			<footer class="post-metadata">
				<ul>
					<li>Published on <time datetime="2008-04-14T16:50:55+00:00">April 14, 2008</time></li>
					<li><a href="http://markos.gaivo.net/blog/?p=252#comments" title="Comment on Debugging Javascript applications">Add your comment</a> </li>
				</ul>
			</footer>
		</article>
		
		<nav class="pagination">
			<ul>
				<li><a href="http://markos.gaivo.net/blog/?paged=29" >&laquo; Newer articles</a></li>
				<li><a href="http://markos.gaivo.net/blog/?paged=31" >Older articles &raquo;</a></li>
			</ul>
		</nav>
	</section>


	<footer>
		<ul>
			<li>&copy; 2005-2015 Marko Samastur</li>
			
			<li><a href="http://markos.gaivo.net/blog/?feed=rss2">Entries feed</a></li>
			<li><a href="http://markos.gaivo.net/blog/?feed=comments-rss2">Comments feed</a></li>
		</ul>
		<a href="/"><img src="/img/markos_light_small_bg.png" alt="logo" class="mini-logo" /></a>
	</footer>
	<script src="/js/jquery.js"></script>
	<script src="/js/all.js"></script>
	<!--script src="/mint/?js" type="text/javascript"></script-->

	<!-- Google analytics -->
	<script type="text/javascript">

	  var _gaq = _gaq || [];
	  _gaq.push(['_setAccount', 'UA-152438-1']);
	  _gaq.push(['_trackPageview']);
	</script>
	<script src="/js/cookie.js"></script>
</body>
</html>
