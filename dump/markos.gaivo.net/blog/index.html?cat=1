<!DOCTYPE html>
<html lang="en">
<head>
	<title>A notch above a monkey &raquo; Javascript</title>
	<meta charset="utf-8" />
	
	<meta name="viewport" content="width=device-width, initial-scale=1.0" /> 

	<link rel="shortcut icon" href="/img/markos.ico" />
	
	<meta name="generator" content="WordPress 3.0.5" /> <!-- leave this for stats please -->

	<link href="http://fast.fonts.com/cssapi/aee9b60b-8e94-47f8-b586-3ecbfab51d1c.css" rel="stylesheet" type="text/css" />
	<link rel="stylesheet" type="text/css" href="css/home.css" media="screen" title="Light theme" />
	<link rel="alternate stylesheet" type="text/css" href="css/home_dark.css" media="screen" title="Dark theme" />
	<link rel="stylesheet" href="css/ipad.css" media="only screen and (min-device-width : 768px) and (max-device-width : 1024px)">
	<link rel="stylesheet" type="text/css" href="css/smallscreen.css" media="only screen and (max-width: 700px)" />

	<link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://markos.gaivo.net/blog/?feed=rss2" />
	<link rel="alternate" type="application/atom+xml" title="Atom 1.0" href="http://markos.gaivo.net/blog/?feed=atom" />
	<link rel='canonical' href='http://markos.gaivo.net/blog/?p=664' />

	<link rel="pingback" href="http://markos.gaivo.net/blog/xmlrpc.php" />

	<link rel="alternate" type="application/rss+xml" title="A notch above a monkey &raquo; Javascript Category Feed" href="http://markos.gaivo.net/blog/?feed=rss2&amp;cat=1" />
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://markos.gaivo.net/blog/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://markos.gaivo.net/blog/wp-includes/wlwmanifest.xml" /> 
<link rel='index' title='A notch above a monkey' href='http://markos.gaivo.net/blog' />
<meta name="generator" content="WordPress 3.0.5" />

	<!--[if lt IE 9]>
	<script src="/js/html5.js"></script>
	<![endif]-->
</head>
<body>
	<section class="envelope posts">
		<header>
			<h1><a href="http://markos.gaivo.net/blog/">A notch above a monkey</a></h1>
		</header>
		<nav class="colophon">
			<h1>By Marko Samastur</h1>
			<ul>
				<li><a href="/">About me</a></li>
				<li><a href="http://markos.gaivo.net/blog/?feed=atom">Subscribe</a></li>
			</ul>
		</nav>

	
		<article>
			<h1 class="storytitle"><a href="http://markos.gaivo.net/blog/?p=1119" rel="bookmark">Laughable Javascript security</a></h1>

			<div class="post-text">
				<p>Building a secure web application is not easy, unless you also use 3rd party code such as Facebook&#8217;s Like widget in which case it is impossible. What you have is just an illusion of security, a door to abuse that you can&#8217;t even check if it is currently closed.</p>
<p>Or that&#8217;s what I thought for years. A once substantiated belief that grew into an almost dogmatic certainty until I recently got a chance to revisit it when trying to design a secure Javascript-based web application living inside of a likely untrusted environment.</p>
<p>There are obvious things you can do to protect your application such as delivery over secure connections and use of anonymous functions to sandbox your code from outside interference. However you will probably need to interact with external code at some point in which case is that <em>XMLHTTPRequest</em> object you are using really the built-in one or has it been replaced (cloaked) with an impostor object to perform <a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack">the man-in-the-middle attack</a>?</p>
<p>I don&#8217;t know of a way to check if an object is untouched. What is sometimes used instead is a <em>.toString</em> method which on functions and methods returns their source unless they are native to browser in which case it returns a string saying so.</p>
<p>Since you can replace any attribute and method on any object some <a href="http://stackoverflow.com/questions/6598945/detect-if-function-is-native-to-browser#comment8044242_6599105">go even further</a> in search of a certainty and use <em>.toString</em> from the <em>Function</em> object.</p>
<p>At first thought that looked clever until I came up with:</p>
<ol class="code">
<li><code>&#60;!DOCTYPE HTML&#62;</code></li>
<li><code>&#60;html lang=&#34;en&#34;&#62;</code></li>
<li><code>&#60;head&#62;</code></li>
<li class="tab1"><code>&#60;meta charset=&#34;UTF-8&#34;&#62;</code></li>
<li class="tab1"><code>&#60;title&#62;Break check if function is native&#60;/title&#62;</code></li>
<li><code>&#60;/head&#62;</code></li>
<li><code>&#60;body&#62;</code></li>
<li class="tab1"><code>&#60;script&#62;</code></li>
<li><code>(function () {</code></li>
<li class="tab1"><code>var toS = Function.prototype.toString,</code></li>
<li class="tab2"><code>pM_str = window.postMessage.toString();</code></li>
<li>&#160;</li>
<li class="tab1"><code>Function.prototype.toString = function () {</code></li>
<li class="tab2"><code>return this === window.postMessage ? pM_str : toS.call(this);</code></li>
<li class="tab1"><code>}</code></li>
<li class="tab1"><code>window.postMessage = function () { console.log('Fake'); };</code></li>
<li><code>})();</code></li>
<li class="tab1"><code>&#60;/script&#62;</code></li>
<li><code>&#60;/body&#62;</code></li>
<li><code>&#60;/html&#62;</code></li>
<li>&#160;</li>
<li class="download">Download this code: <a href="http://markos.gaivo.net/blog/code/nativecheck.txt" title="Download the above code as a text file">/code/nativecheck.txt</a></li>
</ol>
<p>The code above replaces <em>Function&#8217;s .toString</em> method with a one that lies when executed on an also cloaked <em>window.postMessage</em>. Instead of displaying source of the new <em>postMessage</em> it prints whatever browser would print for the original one.</p>
<p>It simultaneously demonstrates how you can cloak native Javascript objects and hide that you are doing it. If you put malicious code into an anonymous function and remove <em>&lt;script&gt;</em> node that added it after it gets executed, then there is no way for scripts loading later to know that it happened. There will be no traces of crime.</p>
<p>It might be difficult to cloak literals like {} and [], but you certainly can their methods so even if your code is wrapped in an anonymous function, it isn&#8217;t really secured from outside peeking and poking. Hence you even <strong>can&#8217;t trust your own code</strong>.</p>
<p>Turns out that this particular dogma is also true. Depressing.</p>
			</div>

			<footer class="post-metadata">
				<ul>
					<li>Published on <time datetime="2013-07-11T22:57:01+00:00">July 11, 2013</time></li>
					<li><a href="http://markos.gaivo.net/blog/?p=1119#comments" title="Comment on Laughable Javascript security">Add your comment</a> </li>
				</ul>
			</footer>
		</article>
	
		<article>
			<h1 class="storytitle"><a href="http://markos.gaivo.net/blog/?p=591" rel="bookmark">Using canvas and Javascript to blur images</a></h1>

			<div class="post-text">
				<p>I admire the look and feel of <a href="http://www.mikematas.com/">Mike Matas&#8217; new website</a>. It is really well thought through. I was also intrigued by how he did it, especially after getting a pop-up on my first visit advising me to use a more modern browser than a recent version of Firefox.</p>
<p>There is no point in speculating why some of its features don&#8217;t work in more browsers. But I was surprised to see that blurred images are served that way and don&#8217;t get blurred in browser. I am playing with an idea of implementing a gallery inspired by Mike&#8217;s work, but I would like to reduce manual labor needed for maintaining it.</p>
<p>So I wrote a function that blurs an image on canvas. You can <a title="Javascript blur demo page" href="http://markos.gaivo.net/examples/canvas_blur/">see it in action</a> or copy its code, if you find it useful.</p>
<p>The algorithm used is described in <a title="Link to PDF version of paper" href="http://web.archive.org/web/20060718054020/http://www.acm.uiuc.edu/siggraph/workshops/wjarosz_convolution_2001.pdf">2001 paper</a> by Wojciech Jarosz. Page contains two implementations, second trading algorithm purity for in my opinion nicer code. Increase number of passes or run it few times over an image, if you need a blurrier result.? Please ask, if you need help with its use.</p>
<p>I also measured its speed to see if it fits my needs. That brought a new surprise. Firefox 3.5.8? on my Linux powered VAIO with 1.2GHz processor blurs image twice as fast as same browser on a Mac with a 2.8Ghz processor. Numbers between runs may vary slightly, but never much. No idea why this is happening, since all functions do is some basic math over items in array that should be well optimized everywhere.</p>
<p>I am sure somebody can optimize it further, but I find it good enough for my use. Image isn&#8217;t very blurred after one pass, but one pass over a small image is also a good way to measure how fast a particular computer-browser combination is. On fast combinations I might go for multiple passes over images in view, but fall back to a single pass or no pass on slower systems.</p>
<div class="zemanta-pixie"><a class="zemanta-pixie-a" title="Reblog this post [with Zemanta]" href="http://reblog.zemanta.com/zemified/4b7c629c-fdbe-4190-ade4-e240b1b3755a/"><img class="zemanta-pixie-img" src="http://img.zemanta.com/reblog_e.png?x-id=4b7c629c-fdbe-4190-ade4-e240b1b3755a" alt="Reblog this post [with Zemanta]" /></a></div>
			</div>

			<footer class="post-metadata">
				<ul>
					<li>Published on <time datetime="2010-04-01T10:59:34+00:00">April 1, 2010</time></li>
					<li><a href="http://markos.gaivo.net/blog/?p=591#comments" title="Comment on Using canvas and Javascript to blur images">Add your comment</a> </li>
				</ul>
			</footer>
		</article>
	
		<article>
			<h1 class="storytitle"><a href="http://markos.gaivo.net/blog/?p=549" rel="bookmark">Dreaming about arithmetic mean</a></h1>

			<div class="post-text">
				<p>I had a crazy dream, where I was back at University, but this time studying computer science. We were writing a function to calculate an <a class="zem_slink" href="http://en.wikipedia.org/wiki/Arithmetic_mean" title="Arithmetic mean" rel="wikipedia">arithmetic mean</a> of an array of numbers. A task obviously too simple for college course, but with dreams you get what you are given.</p>
<p>Discussion started with this function:</p>
<ol class="code">
<li><code>function average(arr) {</code></li>
<li class="tab1"><code>var i, sum = 0;</code></li>
<li class="tab1"><code>for(i=0;i&#60;arr.length;i++) {</code></li>
<li class="tab2"><code>sum += arr[i];</code></li>
<li class="tab1"><code>}</code></li>
<li class="tab1"><code>return sum/i;</code></li>
<li><code>}</code></li>
<li>&#160;</li>
<li class="download">Download this code: <a href="http://markos.gaivo.net/blog/code/dreamjs.txt" title="Download the above code as a text file">/code/dreamjs.txt</a></li>
</ol>
<p>Dream me, who by the way is significantly more bitchy than I ever am, wasn&#8217;t pleased and thought he could save few bytes by storing counter and sum inside of the array:</p>
<ol class="code">
<li><code>function average(arr) {</code></li>
<li class="tab1 cmnt"><code>// Store counter in array[0] and sum in array[1]</code></li>
<li class="tab1"><code>if (arr.length &#60; 3) {</code></li>
<li class="tab2"><code>return arr.length == 2 ? arr[0]+arr[1] : arr[0];</code></li>
<li class="tab1"><code>} else {</code></li>
<li class="tab2"><code>arr[1] = arr[0]+arr[1];</code></li>
<li class="tab2"><code>arr[0] = 2;</code></li>
<li class="tab2"><code>for(;arr[0]&#60;arr.length;arr[0]++) {</code></li>
<li class="tab3"><code>arr[1] += arr[arr[0]];</code></li>
<li class="tab2"><code>}</code></li>
<li class="tab1"><code>}</code></li>
<li class="tab1"><code>return arr[1]/arr[0];</code></li>
<li><code>}</code></li>
<li>&#160;</li>
<li class="download">Download this code: <a href="http://markos.gaivo.net/blog/code/dreamjs2.txt" title="Download the above code as a text file">/code/dreamjs2.txt</a></li>
</ol>
<p>This looked ugly, but what bothered him (me?) was more that it also had a bug. Integer in <a class="zem_slink" href="http://en.wikipedia.org/wiki/JavaScript" title="JavaScript" rel="wikipedia">Javascript</a> is limited to 2<sup>53</sup>, which is a lot, but sum can still <a class="zem_slink" href="http://en.wikipedia.org/wiki/Arithmetic_overflow" title="Arithmetic overflow" rel="wikipedia">overflow</a> or underflow it. Since mean can never be smaller than smallest or bigger than biggest number in a list, I could fix it by writing:</p>
<ol class="code">
<li><code>function average(arr) {</code></li>
<li class="tab1"><code>var n = arr.length, sum=0;</code></li>
<li class="tab1"><code>while (arr.length) {</code></li>
<li class="tab2"><code>sum += arr.pop()/n;</code></li>
<li class="tab1"><code>}</code></li>
<li class="tab1"><code>return sum;</code></li>
<li><code>}</code></li>
<li>&#160;</li>
<li class="download">Download this code: <a href="http://markos.gaivo.net/blog/code/dreamjs3.txt" title="Download the above code as a text file">/code/dreamjs3.txt</a></li>
</ol>
<p>End of dream. Everything edited for sanity and brevity.</p>
<p>I don&#8217;t have much to say about second program except that I would never write something so ugly just to save 16 bytes in a function like this. I wouldn&#8217;t even use Javascript if memory was that important.</p>
<p>I am more intrigued by third program. Bug in second is definitely there, even though few of us operate with numbers big enough to encounter it.</p>
<p>It&#8217;s interesting, because if I was awake, I would probably never think of it. I used to worry about bugs like this all the time, when I was coding in C. It was an unavoidable consequence of the language.</p>
<p>I guess what I am getting at is that it is nice to code in a high-level language and for the most part not think about implementation details like this, but only as long as you actually know them so your brain gets triggered when they matter. Speaking of details, I bet those divisions can cause rounding errors.</p>
<div class="zemanta-pixie"><a class="zemanta-pixie-a" href="http://reblog.zemanta.com/zemified/7ab2d445-07ff-4ec6-bed9-f29a2797d7a3/" title="Reblog this post [with Zemanta]"><img class="zemanta-pixie-img" src="http://img.zemanta.com/reblog_e.png?x-id=7ab2d445-07ff-4ec6-bed9-f29a2797d7a3" alt="Reblog this post [with Zemanta]" /></a><span class="zem-script paragraph-reblog"><script type="text/javascript" src="http://static.zemanta.com/readside/loader.js" defer="defer"></script></span></div>
			</div>

			<footer class="post-metadata">
				<ul>
					<li>Published on <time datetime="2010-01-24T11:44:03+00:00">January 24, 2010</time></li>
					<li><a href="http://markos.gaivo.net/blog/?p=549#comments" title="Comment on Dreaming about arithmetic mean">Add your comment</a> </li>
				</ul>
			</footer>
		</article>
		
		<nav class="pagination">
			<ul>
				<li></li>
				<li><a href="http://markos.gaivo.net/blog/?cat=1&#038;paged=2" >Older articles &raquo;</a></li>
			</ul>
		</nav>
	</section>


	<footer>
		<ul>
			<li>&copy; 2005-2015 Marko Samastur</li>
			
			<li><a href="http://markos.gaivo.net/blog/?feed=rss2">Entries feed</a></li>
			<li><a href="http://markos.gaivo.net/blog/?feed=comments-rss2">Comments feed</a></li>
		</ul>
		<a href="/"><img src="/img/markos_light_small_bg.png" alt="logo" class="mini-logo" /></a>
	</footer>
	<script src="/js/jquery.js"></script>
	<script src="/js/all.js"></script>
	<!--script src="/mint/?js" type="text/javascript"></script-->

	<!-- Google analytics -->
	<script type="text/javascript">

	  var _gaq = _gaq || [];
	  _gaq.push(['_setAccount', 'UA-152438-1']);
	  _gaq.push(['_trackPageview']);
	</script>
	<script src="/js/cookie.js"></script>
</body>
</html>
