<!DOCTYPE html>
<html lang="en">
<head>
	<title>A notch above a monkey &raquo; General development</title>
	<meta charset="utf-8" />
	
	<meta name="viewport" content="width=device-width, initial-scale=1.0" /> 

	<link rel="shortcut icon" href="/img/markos.ico" />
	
	<meta name="generator" content="WordPress 3.0.5" /> <!-- leave this for stats please -->

	<link href="http://fast.fonts.com/cssapi/aee9b60b-8e94-47f8-b586-3ecbfab51d1c.css" rel="stylesheet" type="text/css" />
	<link rel="stylesheet" type="text/css" href="css/home.css" media="screen" title="Light theme" />
	<link rel="alternate stylesheet" type="text/css" href="css/home_dark.css" media="screen" title="Dark theme" />
	<link rel="stylesheet" href="css/ipad.css" media="only screen and (min-device-width : 768px) and (max-device-width : 1024px)">
	<link rel="stylesheet" type="text/css" href="css/smallscreen.css" media="only screen and (max-width: 700px)" />

	<link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://markos.gaivo.net/blog/?feed=rss2" />
	<link rel="alternate" type="application/atom+xml" title="Atom 1.0" href="http://markos.gaivo.net/blog/?feed=atom" />
	<link rel='canonical' href='http://markos.gaivo.net/blog/?p=664' />

	<link rel="pingback" href="http://markos.gaivo.net/blog/xmlrpc.php" />

	<link rel="alternate" type="application/rss+xml" title="A notch above a monkey &raquo; General development Category Feed" href="http://markos.gaivo.net/blog/?feed=rss2&amp;cat=5" />
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://markos.gaivo.net/blog/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://markos.gaivo.net/blog/wp-includes/wlwmanifest.xml" /> 
<link rel='index' title='A notch above a monkey' href='http://markos.gaivo.net/blog' />
<meta name="generator" content="WordPress 3.0.5" />

	<!--[if lt IE 9]>
	<script src="/js/html5.js"></script>
	<![endif]-->
</head>
<body>
	<section class="envelope posts">
		<header>
			<h1><a href="http://markos.gaivo.net/blog/">A notch above a monkey</a></h1>
		</header>
		<nav class="colophon">
			<h1>By Marko Samastur</h1>
			<ul>
				<li><a href="/">About me</a></li>
				<li><a href="http://markos.gaivo.net/blog/?feed=atom">Subscribe</a></li>
			</ul>
		</nav>

	
		<article>
			<h1 class="storytitle"><a href="http://markos.gaivo.net/blog/?p=304" rel="bookmark">Shipping software frequency</a></h1>

			<div class="post-text">
				<p>I was <a title="Paul's article on cost of checks" href="http://www.paulgraham.com/artistsship.html">reading</a> <a class="zem_slink" title="Paul Graham" rel="wikipedia" href="http://en.wikipedia.org/wiki/Paul_Graham">Paul Graham</a> today, who among other things touched on a subject that has been on my mind lately. Software shipping.</p>
<p>At Zemanta, we usually don&#8217;t ship daily although when needed we do. We try to do a release of new features and bug fixes every 2-3 weeks and on the whole we are succeeding. Still, this is not as often as many startups profess to do and it&#8217;s certainly not as often as most of us would like. Even though I probably bear the majority of &#8220;blame&#8221; for this, I too wish we shipped more often.</p>
<p>So why don&#8217;t we?</p>
<p>There are many factors that define how quickly can something be shipped and even though I don&#8217;t think I have an exhaustive list, I find following most important (listed in no particular order):</p>
<ul>
<li>code base</li>
<li>shipping changes</li>
<li>team</li>
<li>tolerance of failure</li>
<li>time</li>
</ul>
<h4>Code base</h4>
<p>Simply put, <strong>better code is easier to change</strong> and evolve with new features without introducing new bugs.</p>
<p>Speed of development rarely results in pristine code, so we need to clean things up every now and then, which creates a need to regularly evaluate the quality of our code base and its impact on our ability to deliver.</p>
<h4>Shipping changes</h4>
<p><strong>Smaller changes are easier to check</strong> and quicker to develop. More intrusive new code is, harder it is to reliably avoid detrimental effect on already existing code.</p>
<p>Fixing, testing and shipping a CSS bug can be done almost instantly. Changing core of the widget usually takes a bit more effort to avoid regressions.</p>
<h4>Team</h4>
<p><strong>Better developers produce better code</strong> more quickly.</p>
<p>Some testing is always necessary, but there&#8217;s a direct connection between code author&#8217;s reputation and experience and trust we put in his code.</p>
<h4>Tolerance of failure</h4>
<p>Tolerance of users and tolerance of system to change is crucial.</p>
<p>If you provide a service where failure is not an option, then this should affect at least how deeply tested new release has to be. It&#8217;s also important for your system to be able to revert to last working state, but sometimes this is not desired and important glitches need to be fixed as they are encountered.</p>
<h4>Time</h4>
<p>If your <strong>schedule</strong> is <strong>too tight to fix bugs</strong> found in new release, it&#8217;s <strong>too tight for release</strong>.</p>
<p>No matter how much you test your software and at Zemanta we do this a lot, new code will introduce new bugs. It will happen that some of them will be too big to wait for next scheduled release and need an immediate fix. If you for some reason can&#8217;t afford this, then it may be better not to ship yet.</p>
<h4>Pendulum of change</h4>
<p>It should be obvious from this list that no factor is set in stone and what might have been a right decision few months ago might not be best one now.</p>
<p>A lot has changed in last few months, so the next time we address this topic, I suspect my opinion will be different than last time.</p>
<div class="zemanta-pixie"><a class="zemanta-pixie-a" title="Zemified by Zemanta" href="http://reblog.zemanta.com/zemified/81d6b87c-78c1-4e73-877d-43a1db60b537/"><img class="zemanta-pixie-img" src="http://img.zemanta.com/reblog_e.png?x-id=81d6b87c-78c1-4e73-877d-43a1db60b537" alt="Reblog this post [with Zemanta]" /></a></div>
			</div>

			<footer class="post-metadata">
				<ul>
					<li>Published on <time datetime="2008-11-30T20:45:56+00:00">November 30, 2008</time></li>
					<li><a href="http://markos.gaivo.net/blog/?p=304#comments" title="Comment on Shipping software frequency">Add your comment</a> </li>
				</ul>
			</footer>
		</article>
	
		<article>
			<h1 class="storytitle"><a href="http://markos.gaivo.net/blog/?p=281" rel="bookmark">Generating Python Exceptions Classes</a></h1>

			<div class="post-text">
				<p>It&#8217;s been a while since I used <a class="zem_slink" title="Python (programming language)" rel="homepage" href="http://www.python.org/">Python</a> for anything larger than scripts few tens lines long, so it feels really great to do it again. I did discover however that I became a bit rusty. Not so much in not being able to achieve what I want as not being sure that I do it in a sensible and pythonic way.</p>
<p>I&#8217;ve been working on a private project where I came to a following problem. <a class="zem_slink" title="Application programming interface" rel="wikipedia" href="http://en.wikipedia.org/wiki/Application_programming_interface">API</a> calls can trigger various responses, somewhat like <a class="zem_slink" title="Hypertext Transfer Protocol" rel="wikipedia" href="http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol">HTTP</a>, containing status codes together with a short description. Every faulty response should trigger its own exception, which led me to my first implementation:</p>
<pre><code>
class Unauthorized(Exception):
    status = 101
    value = "Unauthorized."
</code></pre>
<p>I didn&#8217;t like it even though it looks and behaves like it should. What I wanted was a better overlook of possible responses in a way where I have to make any possible changes easily and only at one place.</p>
<p>My <a title="Example" href="http://markos.gaivo.net/examples/pyexceptions/exceptions1.txt">second attempt</a> was auto-generating exception classes using type. Since class definition took only a line instead of three, it certainly achieved better transparency, but I still had to make changes at two places.</p>
<p><a href="http://markos.gaivo.net/examples/pyexceptions/exceptions2.txt">Final step</a> was to auto-generate classes in a loop. To do this I attached them to module namespace using globals() dictionary. Actually I used __builtin__ one at first, but it obviously didn&#8217;t work that great.</p>
<p>So this is what I have now. It works and achieves my goals. I only need to change dictionary to add a new response or change existing one and it could hardly be more readable.</p>
<p>But is it pythonic enough? If not, what would be, apart from traditional way described in first step?</p>
<div class="zemanta-pixie" style="margin-top: 10px; height: 15px;"><a class="zemanta-pixie-a" title="Zemified by Zemanta" href="http://reblog.zemanta.com/zemified/67741c44-cb65-4003-8f66-f8ceb221a025/"><img class="zemanta-pixie-img" style="border: medium none; float: right;" src="http://img.zemanta.com/reblog_e.png?x-id=67741c44-cb65-4003-8f66-f8ceb221a025" alt="Zemanta Pixie" /></a></div>
			</div>

			<footer class="post-metadata">
				<ul>
					<li>Published on <time datetime="2008-07-22T09:39:53+00:00">July 22, 2008</time></li>
					<li><a href="http://markos.gaivo.net/blog/?p=281#comments" title="Comment on Generating Python Exceptions Classes">Add your comment</a> </li>
				</ul>
			</footer>
		</article>
	
		<article>
			<h1 class="storytitle"><a href="http://markos.gaivo.net/blog/?p=266" rel="bookmark">Switched&#8230;to Firefox 3</a></h1>

			<div class="post-text">
				<p>Today I switched to <a class="zem_slink" title="Mozilla Firefox" rel="homepage" href="http://www.firefox.com/">Firefox 3</a> as my main browser. I didn&#8217;t want to, because as a policy I try to use most common version as default, but I made a mistake of opening version 3 and since then none of my old add-ons seem to work on previous version anymore.</p>
<p>If I was still a young pup, I would probably dive into config files, search <a class="zem_slink" title="World Wide Web" rel="wikipedia" href="http://en.wikipedia.org/wiki/World_Wide_Web">the web</a> for answers and try to fix it. But when you get to 34, time becomes too precious to muck about needlessly and you just want to focus on things you need or better yet want to do.</p>
<p>So version three it is. This has got me thinking about something else. It&#8217;s remarkable how difficult or simply an annoyance it still is to have two version of a browser installed. Clearly this should be possible and is in interest of everyone involved.</p>
<p>Anyway, enough of ranting. Time to get back to cutting cake&#8230;</p>
<div class="zemanta-pixie" style="margin-top: 10px; height: 15px;"><a class="zemanta-pixie-a" title="Zemified by Zemanta" href="http://reblog.zemanta.com/zemified/79c05cbe-847f-4fa0-8dc3-878f8e79208f/"><img class="zemanta-pixie-img" style="border: medium none; float: right;" src="http://img.zemanta.com/reblog_a.png?x-id=79c05cbe-847f-4fa0-8dc3-878f8e79208f" alt="Zemanta Pixie" /></a></div>
			</div>

			<footer class="post-metadata">
				<ul>
					<li>Published on <time datetime="2008-06-22T15:04:45+00:00">June 22, 2008</time></li>
					<li><a href="http://markos.gaivo.net/blog/?p=266#comments" title="Comment on Switched&#8230;to Firefox 3">Add your comment</a> </li>
				</ul>
			</footer>
		</article>
		
		<nav class="pagination">
			<ul>
				<li><a href="http://markos.gaivo.net/blog/?cat=5&#038;paged=6" >&laquo; Newer articles</a></li>
				<li><a href="http://markos.gaivo.net/blog/?cat=5&#038;paged=8" >Older articles &raquo;</a></li>
			</ul>
		</nav>
	</section>


	<footer>
		<ul>
			<li>&copy; 2005-2015 Marko Samastur</li>
			
			<li><a href="http://markos.gaivo.net/blog/?feed=rss2">Entries feed</a></li>
			<li><a href="http://markos.gaivo.net/blog/?feed=comments-rss2">Comments feed</a></li>
		</ul>
		<a href="/"><img src="/img/markos_light_small_bg.png" alt="logo" class="mini-logo" /></a>
	</footer>
	<script src="/js/jquery.js"></script>
	<script src="/js/all.js"></script>
	<!--script src="/mint/?js" type="text/javascript"></script-->

	<!-- Google analytics -->
	<script type="text/javascript">

	  var _gaq = _gaq || [];
	  _gaq.push(['_setAccount', 'UA-152438-1']);
	  _gaq.push(['_trackPageview']);
	</script>
	<script src="/js/cookie.js"></script>
</body>
</html>
