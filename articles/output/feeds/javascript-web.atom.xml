<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>A notch above a monkey - Javascript, Web</title><link href="http://markos.gaivo.net/articles/" rel="alternate"></link><link href="/articles/feeds/javascript-web.atom.xml" rel="self"></link><id>http://markos.gaivo.net/articles/</id><updated>2010-04-01T10:59:00+02:00</updated><entry><title>Using canvas and Javascript to blur images</title><link href="http://markos.gaivo.net/articles/using-canvas-and-javascript-to-blur-images.html" rel="alternate"></link><published>2010-04-01T10:59:00+02:00</published><updated>2010-04-01T10:59:00+02:00</updated><author><name>markos</name></author><id>tag:markos.gaivo.net,2010-04-01:/articles/using-canvas-and-javascript-to-blur-images.html</id><summary type="html">&lt;div&gt;
 &lt;p&gt;
  I admire the look and feel of
  &lt;a href="http://www.mikematas.com/"&gt;
   Mike Matas’ new website
  &lt;/a&gt;
  . It is really well thought through. I was also intrigued by how he did it, especially after getting a pop-up on my first visit advising me to use a more modern browser than a recent version of Firefox.
 &lt;/p&gt;
 &lt;p&gt;
  There …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div&gt;
 &lt;p&gt;
  I admire the look and feel of
  &lt;a href="http://www.mikematas.com/"&gt;
   Mike Matas’ new website
  &lt;/a&gt;
  . It is really well thought through. I was also intrigued by how he did it, especially after getting a pop-up on my first visit advising me to use a more modern browser than a recent version of Firefox.
 &lt;/p&gt;
 &lt;p&gt;
  There is no point in speculating why some of its features don’t work in more browsers. But I was surprised to see that blurred images are served that way and don’t get blurred in browser. I am playing with an idea of implementing a gallery inspired by Mike’s work, but I would like to reduce manual labor needed for maintaining it.
 &lt;/p&gt;
 &lt;p&gt;
  So I wrote a function that blurs an image on canvas. You can
  &lt;a href="http://markos.gaivo.net/examples/canvas_blur/" title="Javascript blur demo page"&gt;
   see it in action
  &lt;/a&gt;
  or copy its code, if you find it useful.
 &lt;/p&gt;
 &lt;p&gt;
  The algorithm used is described in
  &lt;a href="http://web.archive.org/web/20060718054020/http://www.acm.uiuc.edu/siggraph/workshops/wjarosz_convolution_2001.pdf" title="Link to PDF version of paper"&gt;
   2001 paper
  &lt;/a&gt;
  by Wojciech Jarosz. Page contains two implementations, second trading algorithm purity for in my opinion nicer code. Increase number of passes or run it few times over an image, if you need a blurrier result.? Please ask, if you need help with its use.
 &lt;/p&gt;
 &lt;p&gt;
  I also measured its speed to see if it fits my needs. That brought a new surprise. Firefox 3.5.8? on my Linux powered VAIO with 1.2GHz processor blurs image twice as fast as same browser on a Mac with a 2.8Ghz processor. Numbers between runs may vary slightly, but never much. No idea why this is happening, since all functions do is some basic math over items in array that should be well optimized everywhere.
 &lt;/p&gt;
 &lt;p&gt;
  I am sure somebody can optimize it further, but I find it good enough for my use. Image isn’t very blurred after one pass, but one pass over a small image is also a good way to measure how fast a particular computer-browser combination is. On fast combinations I might go for multiple passes over images in view, but fall back to a single pass or no pass on slower systems.
 &lt;/p&gt;
&lt;/div&gt;</content><category term="function"></category><category term="canvas"></category><category term="Firefox"></category><category term="algorithm"></category><category term="image"></category><category term="blur"></category></entry><entry><title>Javascript: The Good Parts and string.split problem</title><link href="http://markos.gaivo.net/articles/javascript-the-good-parts-and-stringsplit-problem.html" rel="alternate"></link><published>2009-03-29T11:15:00+02:00</published><updated>2009-03-29T11:15:00+02:00</updated><author><name>markos</name></author><id>tag:markos.gaivo.net,2009-03-29:/articles/javascript-the-good-parts-and-stringsplit-problem.html</id><summary type="html">&lt;div&gt;
 &lt;p&gt;
  I just read
  &lt;a class="zem_slink" href="http://crockford.com/" rel="homepage" title="Douglas Crockford"&gt;
   Douglas Crockford
  &lt;/a&gt;
  ‘s book
  &lt;a href="http://www.amazon.com/gp/product/0596517742?ie=UTF8&amp;amp;tag=devel-20&amp;amp;linkCode=as2&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0596517742"&gt;
   JavaScript: The Good Parts
  &lt;/a&gt;
  . It’s what a technical book should be. Concise yet full of useful information as a result of clear scope and sticking to it. If my experience is anything to go by, then there are not many Javascript programmers …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div&gt;
 &lt;p&gt;
  I just read
  &lt;a class="zem_slink" href="http://crockford.com/" rel="homepage" title="Douglas Crockford"&gt;
   Douglas Crockford
  &lt;/a&gt;
  ‘s book
  &lt;a href="http://www.amazon.com/gp/product/0596517742?ie=UTF8&amp;amp;tag=devel-20&amp;amp;linkCode=as2&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0596517742"&gt;
   JavaScript: The Good Parts
  &lt;/a&gt;
  . It’s what a technical book should be. Concise yet full of useful information as a result of clear scope and sticking to it. If my experience is anything to go by, then there are not many Javascript programmers who wouldn’t benefit from it.
 &lt;/p&gt;
 &lt;p&gt;
  I did found one bit that wasn’t quite right. On pages 91-92 Douglas discusses
  &lt;em&gt;
   string.split
  &lt;/em&gt;
  method, which can take a regular expression as a separator with which to split string. Douglas rightly points out that if regular expression includes capturing group (stuff between paranthesis like
  &lt;em&gt;
   b(mmm)c
  &lt;/em&gt;
  ), then strings matching those groups will be included in the split.
 &lt;/p&gt;
 &lt;p&gt;
  However Douglas is not completely correct when he says that some implementations drop empty strings in the output array when separator is regular expression. If you run
  &lt;a href="http://markos.gaivo.net/examples/jssplit/index.html"&gt;
   this demo
  &lt;/a&gt;
  in
  &lt;a class="zem_slink" href="http://www.firefox.com/" rel="homepage" title="Mozilla Firefox 3"&gt;
   Firefox3
  &lt;/a&gt;
  and IE7, you’ll see that IE7 drops even non-empty strings from capturing groups, while Firefox3 includes them.
 &lt;/p&gt;
 &lt;p&gt;
  Still, I would find a bug in my code faster this week if I read his book sooner.
 &lt;/p&gt;
&lt;/div&gt;</content><category term="Javascript"></category><category term="JavaScript: The Good Parts"></category><category term="Programming"></category><category term="Douglas Crockford"></category><category term="Regular expression"></category><category term="ie"></category><category term="bug"></category></entry><entry><title>Triggering a server request on onunload event</title><link href="http://markos.gaivo.net/articles/triggering-a-server-request-on-onunload-event.html" rel="alternate"></link><published>2008-03-26T16:32:00+01:00</published><updated>2008-03-26T16:32:00+01:00</updated><author><name>markos</name></author><id>tag:markos.gaivo.net,2008-03-26:/articles/triggering-a-server-request-on-onunload-event.html</id><summary type="html">&lt;div&gt;
 &lt;p&gt;
  A while ago I tried to trigger an AJAX call to server in
  &lt;em&gt;
   onunload
  &lt;/em&gt;
  handler and failed miserably. It simply didn’t work in major browsers and I filled the idea under can’t-be-done.
 &lt;/p&gt;
 &lt;p&gt;
  I recently got another reason to revisit this problem and came up with a new-old idea …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div&gt;
 &lt;p&gt;
  A while ago I tried to trigger an AJAX call to server in
  &lt;em&gt;
   onunload
  &lt;/em&gt;
  handler and failed miserably. It simply didn’t work in major browsers and I filled the idea under can’t-be-done.
 &lt;/p&gt;
 &lt;p&gt;
  I recently got another reason to revisit this problem and came up with a new-old idea. Since in my case I don’t care about server response, I don’t actually need XMLHttpRequest. Any technique that triggers a call to server is good enough, so why not try creating an image and setting its
  &lt;em&gt;
   url
  &lt;/em&gt;
  attribute to appropriate value.
 &lt;/p&gt;
 &lt;p&gt;
  It turns out that this works almost everywhere. It worked pretty flawlessly in Firefox, Opera and Internet Explorer, but it doesn’t work in Safari and Konqueror, which makes me think that KHTML/Webkit family of browsers in general don’t support it.
 &lt;/p&gt;
 &lt;p&gt;
  This is not its only limitation. Technique obviously works only for GET calls, which is frowned upon and generally dangerous for actions that change state. I also suspect it works less well on slower computers or networks so you might need to delay event handler ending by buying some time with needless processing after you’ve set
  &lt;em&gt;
   url
  &lt;/em&gt;
  attribute.
 &lt;/p&gt;
 &lt;p&gt;
  Still, it might be another useful hack to have if you can live with its limitations.
 &lt;/p&gt;
&lt;/div&gt;</content></entry><entry><title>Javascript events on tablet</title><link href="http://markos.gaivo.net/articles/javascript-events-on-tablet.html" rel="alternate"></link><published>2007-12-16T18:14:00+01:00</published><updated>2007-12-16T18:14:00+01:00</updated><author><name>markos</name></author><id>tag:markos.gaivo.net,2007-12-16:/articles/javascript-events-on-tablet.html</id><summary type="html">&lt;div&gt;
 &lt;p&gt;
  I’ve been curious about interface possibilities and limitations of non-desktop environments like my Nokia tablet for a while, especially as they pertain to web. Pen on a touchscreen obviously doesn’t have to leave a “trail” of traversal like a mouse does. You also don’t have several mouse …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div&gt;
 &lt;p&gt;
  I’ve been curious about interface possibilities and limitations of non-desktop environments like my Nokia tablet for a while, especially as they pertain to web. Pen on a touchscreen obviously doesn’t have to leave a “trail” of traversal like a mouse does. You also don’t have several mouse buttons at your disposal.
 &lt;/p&gt;
 &lt;p&gt;
  So I made a simple
  &lt;a href="http://markos.gaivo.net/examples/jsenvtest.html"&gt;
   test page
  &lt;/a&gt;
  to see how some of more interesting events get caught.
 &lt;/p&gt;
 &lt;p&gt;
  The result on my 770 was quite disappointing while also expected. I’ll summarize it for those who don’t have a tablet. Touching a screen generates
  &lt;em&gt;
   mousemove
  &lt;/em&gt;
  event and sometimes
  &lt;em&gt;
   mouseover
  &lt;/em&gt;
  , but you never get a
  &lt;em&gt;
   mouseout
  &lt;/em&gt;
  event. If touched briefly enough, it’ll also generate
  &lt;em&gt;
   mousedown
  &lt;/em&gt;
  ,
  &lt;em&gt;
   mouseup
  &lt;/em&gt;
  and
  &lt;em&gt;
   click
  &lt;/em&gt;
  event in this order.
 &lt;/p&gt;
 &lt;p&gt;
  You won’t get a
  &lt;em&gt;
   mousedown
  &lt;/em&gt;
  and
  &lt;em&gt;
   mouseup
  &lt;/em&gt;
  events until
  &lt;em&gt;
   click
  &lt;/em&gt;
  . If you keep pressing the screen without moving, you’ll  get a context menu, but I found no way to get to
  &lt;em&gt;
   mousedown
  &lt;/em&gt;
  on its own. This means it’s impossible to create a “natural” drag and drop, which isn’t surprising, since same movement is already taken by browser for scrolling.
 &lt;/p&gt;
 &lt;p&gt;
  My test was limited to Nokia 770 tablet, but I doubt results would be much different elsewhere (Fry, can you check your tablet?). It would also be interesting to see what iPhone does, but since I don’t have it either, I can’t tell.
 &lt;/p&gt;
 &lt;p&gt;
  Still I’ll need to rethink a widget for website I’m working on and keep this in mind for my next year project.
 &lt;/p&gt;
&lt;/div&gt;</content></entry><entry><title>Dynamically controlling behavior and size of a page</title><link href="http://markos.gaivo.net/articles/dynamically-controlling-behavior-and-size-of-a-page.html" rel="alternate"></link><published>2007-12-12T20:37:00+01:00</published><updated>2007-12-12T20:37:00+01:00</updated><author><name>markos</name></author><id>tag:markos.gaivo.net,2007-12-12:/articles/dynamically-controlling-behavior-and-size-of-a-page.html</id><summary type="html">&lt;div&gt;
 &lt;p&gt;
  It’s not a secret that Javascript is interpreted and not statically compiled. Personally I find this an advantage that is not used often enough. If you look around the Web you can find plenty of cases to prove this, but I’d like to add another example.
 &lt;/p&gt;
 &lt;p&gt;
  A few …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div&gt;
 &lt;p&gt;
  It’s not a secret that Javascript is interpreted and not statically compiled. Personally I find this an advantage that is not used often enough. If you look around the Web you can find plenty of cases to prove this, but I’d like to add another example.
 &lt;/p&gt;
 &lt;p&gt;
  A few months ago I was developing a library which had a goal of providing an improved Javascript experience for standardized components without requiring any knowledge of the language to use. I also wanted to support different load scenarios so library could be smaller when needed.
 &lt;/p&gt;
 &lt;p&gt;
  Sadly I ran out of time before I ended my work to my satisfaction. Still, I’d like to discuss one approach that also demonstrates aspects that I’d like to see used more in the wild.
 &lt;/p&gt;
 &lt;p&gt;
  Let’s start with a demo. I created two almost identical pages. Can you spot the difference between
  &lt;a href="http://markos.gaivo.net/examples/richswitch/index.html" title="First demo"&gt;
   first
  &lt;/a&gt;
  and
  &lt;a href="http://markos.gaivo.net/examples/richswitch/index2.html" title="Second demo"&gt;
   second
  &lt;/a&gt;
  ?
 &lt;/p&gt;
 &lt;p&gt;
  First one simply toggles visibility of the text, while second one does the same with a bit more style. If you look at files, you’ll notice that the only difference is that first calls
  &lt;em&gt;
   &lt;a href="http://markos.gaivo.net/examples/richswitch/switch.js"&gt;
    switch.js
   &lt;/a&gt;
  &lt;/em&gt;
  and second uses
  &lt;em&gt;
   &lt;a href="http://markos.gaivo.net/examples/richswitch/rswitch.js"&gt;
    rswitch.js
   &lt;/a&gt;
  &lt;/em&gt;
  . Both files look the same because they are. In fact, it’s really just one file. Hard link to the rescue for us, Unixheads.
 &lt;/p&gt;
 &lt;p&gt;
  But first a small warning. This code is not production ready. I simplified it to keep example clear and concise. In that capacity I think it will do.
 &lt;/p&gt;
 &lt;p&gt;
  Javascript basically consists of two functions. A
  &lt;em&gt;
   window.onload
  &lt;/em&gt;
  handler that’s triggered when page is loaded and an animation function attached to button. A
  &lt;em&gt;
   window.onload
  &lt;/em&gt;
  handler is a one trick pony. Its main idea is to find Javascript file in DOM and based on the name with which it was loaded set up the execution environment. This is just a fancy name (to make me look smart) for setting a global variable that is private to this name space and possibly loading a few additional resources, like YUI animation support in our case. It is also the first case where not being static helps. We can decide at run time what’s necessary and load only what we need.
 &lt;/p&gt;
 &lt;p&gt;
  However, I find
  &lt;em&gt;
   toggleVisible
  &lt;/em&gt;
  a tad bit more interesting and the reason is its
  &lt;em&gt;
   if
  &lt;/em&gt;
  statement. What happens when we include
  &lt;em&gt;
   switch.js
  &lt;/em&gt;
  in a page?
 &lt;/p&gt;
 &lt;p&gt;
  Well, variable
  &lt;em&gt;
   rich
  &lt;/em&gt;
  remains set to
  &lt;em&gt;
   false
  &lt;/em&gt;
  and YUI components don’t get loaded. This means
  &lt;em&gt;
   YAHOO.util
  &lt;/em&gt;
  and its descendants aren’t defined. Yet as we’ve seen from first demo page script works just fine. Reason for this is that
  &lt;em&gt;
   if
  &lt;/em&gt;
  statement in
  &lt;em&gt;
   toggleVisible
  &lt;/em&gt;
  evaluates to
  &lt;em&gt;
   false
  &lt;/em&gt;
  and those undefined statements never get reached. This wouldn’t work in a language like Java, which would notice a call to undefined methods at compile time and refuse to finish compile, but it works perfectly fine in Javascript.
 &lt;/p&gt;
 &lt;p&gt;
  Of course if rich was set true, then we load YUI files. It might happen with this code that we press button before they get loaded, which is one of the reasons why this isn’t a production quality code, but if we assume for a moment that they did, then those same lines in
  &lt;em&gt;
   toggleVisible
  &lt;/em&gt;
  are perfectly fine and it works as hopefully seen on second page.
 &lt;/p&gt;
 &lt;p&gt;
  We therefore have a page where we control its behavior and size only by the way we call javascript file. There’s literally only one letter of difference. With dynamic loading of resources and cordoning potentially nonexistent methods we could fairly easily create a spectrum of possibilities where our users could choose their own compromise between functionality and its price in terms of page size and speed or better handle differences between mobile and desktop browsers.
 &lt;/p&gt;
&lt;/div&gt;</content></entry><entry><title>Flash inside of WYSIWYG HTML editor</title><link href="http://markos.gaivo.net/articles/flash-inside-of-wysiwyg-html-editor.html" rel="alternate"></link><published>2007-07-09T16:23:00+02:00</published><updated>2007-07-09T16:23:00+02:00</updated><author><name>markos</name></author><id>tag:markos.gaivo.net,2007-07-09:/articles/flash-inside-of-wysiwyg-html-editor.html</id><summary type="html">&lt;div&gt;
 &lt;p&gt;
  Has anyone succeeded in getting a flash file to execute inside of (any) WYSIWYG in-browser editor?
 &lt;/p&gt;
 &lt;p&gt;
  It doesn’t work for me and I can think of at least one reason why it shouldn’t (security leak), but has anyone done it anyway?
 &lt;/p&gt;
&lt;/div&gt;</summary><content type="html">&lt;div&gt;
 &lt;p&gt;
  Has anyone succeeded in getting a flash file to execute inside of (any) WYSIWYG in-browser editor?
 &lt;/p&gt;
 &lt;p&gt;
  It doesn’t work for me and I can think of at least one reason why it shouldn’t (security leak), but has anyone done it anyway?
 &lt;/p&gt;
&lt;/div&gt;</content></entry><entry><title>Google Gears Goodies</title><link href="http://markos.gaivo.net/articles/google-gears-goodies.html" rel="alternate"></link><published>2007-05-31T15:00:00+02:00</published><updated>2007-05-31T15:00:00+02:00</updated><author><name>markos</name></author><id>tag:markos.gaivo.net,2007-05-31:/articles/google-gears-goodies.html</id><summary type="html">&lt;div&gt;
 &lt;p&gt;
  It’s an expected fact of a geek life that interesting technologies and gadgets appear when you don’t have either means or time to play with them. No surprise then that
  &lt;a href="http://code.google.com/apis/gears/index.html"&gt;
   Google Gears
  &lt;/a&gt;
  was announced exactly at such a time for me. As you’ve probably read elsewhere, Google …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div&gt;
 &lt;p&gt;
  It’s an expected fact of a geek life that interesting technologies and gadgets appear when you don’t have either means or time to play with them. No surprise then that
  &lt;a href="http://code.google.com/apis/gears/index.html"&gt;
   Google Gears
  &lt;/a&gt;
  was announced exactly at such a time for me. As you’ve probably read elsewhere, Google Gears is a browser extension for Firefox and Internet Explorer (with Safari coming up) which lets developers create web applications that can also run offline on Windows, Mac OS X and Linux.
 &lt;/p&gt;
 &lt;p&gt;
  Google isn’t the first company doing something like this. Adobe has Apollo, Microsoft is working on its own thing, Mozilla added support for offline storage in version 2 of the fox and there are some less well known attempts like Dojo’s. What makes it special are few things.
 &lt;/p&gt;
 &lt;p&gt;
  First, unlike Apollo or Firefox, it’s not a special environment and it’s as cross-browser and cross-platform as it gets these days. Google is also trying to build an industry support for this and Adobe already
  &lt;a href="http://shebanation.com/2007/05/30/google-gears/"&gt;
   announced
  &lt;/a&gt;
  it will support Gears API in Apollo. Same has
  &lt;a href="http://ajaxian.com/archives/audible-ajax-episode-21-dojo-offline-on-google-gears"&gt;
   already been done
  &lt;/a&gt;
  by Dojo Toolkit. There’s also
  &lt;a href="http://erik.eae.net/archives/2007/05/30/19.06.10/#comments"&gt;
   an intention
  &lt;/a&gt;
  to make it an open standard by submitting proposal to WHATWG/W3C (and hopefully them accepting it).
 &lt;/p&gt;
 &lt;p&gt;
  Personally, I can’t wait to play with WorkerPool API (which seems to be overlooked in all the excitement). Having a possibility of running time-intensive operations in a background without the fear of triggering “unresponsive script” dialog is a wish come true. Even though you can’t access objects
  &lt;em&gt;
   document
  &lt;/em&gt;
  and
  &lt;em&gt;
   window
  &lt;/em&gt;
  (and hence any part of the DOM). Reason for this is that background scripts don’t share any execution state and hence can’t all access unique objects like aforementioned ones.
 &lt;/p&gt;
 &lt;p&gt;
  This might limit usefulness of the API somewhat, but there are still plenty of uses that come to my mind. What also comes to my mind is a problem, that isn’t really technological. Web applications gave impression to public of being fairly safe to use even on public computers (which isn’t really true) and I fear many won’t understand that new tools may now store private data where they don’t expect or want them to.
 &lt;/p&gt;
&lt;/div&gt;</content></entry><entry><title>Problem with public javascript hosting</title><link href="http://markos.gaivo.net/articles/problem-with-public-javascript-hosting.html" rel="alternate"></link><published>2007-03-06T16:56:00+01:00</published><updated>2007-03-06T16:56:00+01:00</updated><author><name>markos</name></author><id>tag:markos.gaivo.net,2007-03-06:/articles/problem-with-public-javascript-hosting.html</id><summary type="html">&lt;div&gt;
 &lt;p&gt;
  Yahoo recently
  &lt;a href="http://yuiblog.com/blog/2007/02/22/free-yui-hosting/"&gt;
   announced
  &lt;/a&gt;
  free public hosting of YUI library, just like AOL
  &lt;a href="http://blog.dojotoolkit.org/2006/01/30/dojo-iamalpha-and-cdns"&gt;
   did
  &lt;/a&gt;
  a while ago for Dojo toolkit. A great move. You don’t have to pay bandwidth for hosting YUI and there’s a better likelihood that scripts will already be in visitors browser cache, since some other …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div&gt;
 &lt;p&gt;
  Yahoo recently
  &lt;a href="http://yuiblog.com/blog/2007/02/22/free-yui-hosting/"&gt;
   announced
  &lt;/a&gt;
  free public hosting of YUI library, just like AOL
  &lt;a href="http://blog.dojotoolkit.org/2006/01/30/dojo-iamalpha-and-cdns"&gt;
   did
  &lt;/a&gt;
  a while ago for Dojo toolkit. A great move. You don’t have to pay bandwidth for hosting YUI and there’s a better likelihood that scripts will already be in visitors browser cache, since some other previously visited page might have used them too.
 &lt;/p&gt;
 &lt;p&gt;
  However there’s a real downside to it. What happens if Yahoo servers are unaccessible or connection to them is just slow?
 &lt;/p&gt;
 &lt;p&gt;
  If you’re lucky, then its former and the page will be rendered quickly but with some (javascript) functionality missing. If later, then it might take forever to render a page since modern browsers can’t and won’t do it until all javascript has been loaded.
 &lt;/p&gt;
 &lt;p&gt;
  This might seem an unlikely scenario, unless you’ve been around the last time when access problems to Google Analytics stopped displaying a large part of slovenian web, least important of which being this very blog. Yahoo is not stupid, but neither is Google and problem can literally appear anywhere between their servers and your visitors computer.
 &lt;/p&gt;
 &lt;p&gt;
  So what can be done if this possibility is not acceptable to you, but you’d still want to use free hosting?
 &lt;/p&gt;
 &lt;p&gt;
  Nothing pretty it seems. The only thing that I can think of is to add local links to yui, put them together with Yahoo links at the bottom of the page and trigger Javascript when content has been loaded. Then you only have to wait for YUI objects to appear before you start processing your scripts.
 &lt;/p&gt;
 &lt;p&gt;
  This way you can probably avoid crippled or blank pages, but you’re still paying for the bandwidth. Unless of course you go one step further and include local links only when Yahoo objects don’t appear in a reasonable amount of time.
 &lt;/p&gt;
 &lt;p&gt;
  Does anyone have any idea how to solve this problem gracefully?
 &lt;/p&gt;
&lt;/div&gt;</content></entry><entry><title>Free book</title><link href="http://markos.gaivo.net/articles/free-book.html" rel="alternate"></link><published>2006-12-30T18:36:00+01:00</published><updated>2006-12-30T18:36:00+01:00</updated><author><name>markos</name></author><id>tag:markos.gaivo.net,2006-12-30:/articles/free-book.html</id><summary type="html">&lt;div&gt;
 &lt;p&gt;
  I’ll give
  &lt;a href="http://www.oreilly.com/catalog/jscript4/" title="Book's homepage"&gt;
   4th edition
  &lt;/a&gt;
  of Javascript, the Definitive Guide by David Flanagan to person who emails me first.
 &lt;/p&gt;
 &lt;p&gt;
  The book is in excellent condition even though it’s been in my hands a lot and I can only recommend it to anyone who wants to learn Javascript. I’d …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div&gt;
 &lt;p&gt;
  I’ll give
  &lt;a href="http://www.oreilly.com/catalog/jscript4/" title="Book's homepage"&gt;
   4th edition
  &lt;/a&gt;
  of Javascript, the Definitive Guide by David Flanagan to person who emails me first.
 &lt;/p&gt;
 &lt;p&gt;
  The book is in excellent condition even though it’s been in my hands a lot and I can only recommend it to anyone who wants to learn Javascript. I’d still cling to it, if I haven’t received 5th edition as Christmas gift.
 &lt;/p&gt;
 &lt;p&gt;
  Lucky recipient will be able to claim it at next
  &lt;a href="http://web.zen.si/"&gt;
   Wednesday talk
  &lt;/a&gt;
  , whenever it will be.
 &lt;/p&gt;
&lt;/div&gt;</content></entry><entry><title>Preventing download of javascript on mobile web</title><link href="http://markos.gaivo.net/articles/preventing-javascript-download-on-mobile-web.html" rel="alternate"></link><published>2006-10-29T21:55:00+01:00</published><updated>2006-10-29T21:55:00+01:00</updated><author><name>markos</name></author><id>tag:markos.gaivo.net,2006-10-29:/articles/preventing-javascript-download-on-mobile-web.html</id><summary type="html">&lt;div&gt;
 &lt;p&gt;
  Every year I spend a few weeks somewhere where internet connection is either slow or metered and expensive. Usually it’s both which makes me rather twitchy when it comes to big web page sizes. Yet I’m also certain that my new web home, however it may turn out …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div&gt;
 &lt;p&gt;
  Every year I spend a few weeks somewhere where internet connection is either slow or metered and expensive. Usually it’s both which makes me rather twitchy when it comes to big web page sizes. Yet I’m also certain that my new web home, however it may turn out at the end, will have a significant chunk of it written in Javascript. None of it necessary for working, but more than I’d probably like to download over flimsy mobile phone connection.
 &lt;/p&gt;
 &lt;p&gt;
  The problem are not really old mobile browsers which don’t support Javascript. They won’t download any of it anyway. The question is how to prevent eager browsers, who would, from downloading this stuff when you don’t want them to. My first, rather primitive attempt was
  &lt;a href="http://markos.gaivo.net/examples/envcheck/index.html" title="Demo of javascript ondemand loading depending on media"&gt;
   this demonstration
  &lt;/a&gt;
  , which only works in Opera 9, Safari and Firefox, but most certainly doesn’t work in all browsers.
 &lt;/p&gt;
 &lt;p&gt;
  What it does is check font size of a title and based on its value resolves which media style sheet was used. If it was
  &lt;em&gt;
   mobile.css
  &lt;/em&gt;
  , which is used only when media is set to
  &lt;em&gt;
   handheld
  &lt;/em&gt;
  , then it was probably done from a mobile environment, so it includes the mobile version of a Javascript or it could, if I wanted, none at all.
 &lt;/p&gt;
 &lt;p&gt;
  There are several problems with this approach. First one is that it doesn’t recognize notebook users connecting over a  cellphone. It can’t really, since browser environment is literally the same, unless it would try to measure latency and bandwidth of page elements and guess from those results, which is neither easy nor reliable. 3G networks can be rather fast and have a better latency than a wired connection from somewhere like Tanzania.
 &lt;/p&gt;
 &lt;p&gt;
  But let’s say we don’t care about this case. We can always turn Javascript off in Firefox if it’s important enough to us, which leads us to the next problem. Support for handheld media type is still rather spotty. If browser doesn’t support it, it may load the wrong style sheet if any at all and the wrong CSS value results in wrong turn in Javascript. However
  &lt;em&gt;
   handheld media
  &lt;/em&gt;
  support is getting better. Since I decided from the start that my personal page is a good place where leading edge can also be a bit of bleeding one, that is good enough. On a different site this probably wouldn’t be true.
 &lt;/p&gt;
 &lt;p&gt;
  So it sort of works in principle, but it is crude and error prone. Javascript check is not self-contained and I could easily break it by changing font size value of a title in CSS files while forgetting to do a corresponding correction in code. What would be much better is to learn from the browser which media types style sheets were actually used and act accordingly. Now that would be grand.
 &lt;/p&gt;
 &lt;p&gt;
  There are two ways you could go about this. My first go was finding style nodes in DOM and looking at their
  &lt;em&gt;
   disabled
  &lt;/em&gt;
  property, which is commonly used in style sheet switchers for turning sheets on and off. It doesn’t work, since ‘wrong’ media types in Firefox are ignored, not disabled. Their
  &lt;em&gt;
   disabled
  &lt;/em&gt;
  value is still set to
  &lt;em&gt;
   false
  &lt;/em&gt;
  .
 &lt;/p&gt;
 &lt;p&gt;
  A proper way of doing it would be using DOM Style Sheets methods. Basic idea is to compare actual values as set in the page with values read from style sheets and resolving which ones were used. While not exactly trivial, by little forethought it can be made to work fine in Opera and Firefox. It can also work in Explorer using its own methods, but it’s a pain to make it  work in Safari, which in this case is not only an incompetent liar, it’s also lying in some weird accent. If you’d like to learn more about it, then there’s a
  &lt;a href="http://www.howtocreate.co.uk/tutorials/javascript/domstylesheets" title="Problems with DOM Style Sheets use"&gt;
   great
  &lt;/a&gt;
  page describing current state but the gist of it is that you can’t rely on methods being there and even when they are, in some form or another, they might not work reliably (Safari) or might produce weird results (yup, Safari again).
 &lt;/p&gt;
 &lt;p&gt;
  Well, it could still work, but would require an unreasonable amount of code. Hence I made a different tradeoff, which can be seen
  &lt;a href="http://markos.gaivo.net/examples/envcheck/index2.html" title="Second attempt"&gt;
   here
  &lt;/a&gt;
  . A bit less automation for a lot less code. It keeps the idea of first demo with a small twist. First rule of every media style sheet targets the same element that gets created by Javascript if necessary and compares its font size value with those found in style sheets. It returns media types of all sheets where this value was found.
 &lt;/p&gt;
 &lt;p&gt;
  The end result certainly isn’t perfect or pretty, but it keeps amount of bookkeeping to minimum and limited to CSS files. Even using a “safe” property like font size can lead to problems (e.g. 0.9em is sometimes interpreted as 0.90em), but nothing difficult to overcome.
 &lt;/p&gt;
 &lt;p&gt;
  It might not be of production quality, but it will work as good starting point for further exploration.
 &lt;/p&gt;
&lt;/div&gt;</content></entry></feed>