<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>A notch above a monkey</title><link href="/" rel="alternate"></link><link href="/articles/feeds/python.atom.xml" rel="self"></link><id>/</id><updated>2013-03-24T19:48:00+01:00</updated><entry><title>Exporting tagged articles from Google Reader</title><link href="/exporting-tagged-items-from-google-reader.html" rel="alternate"></link><updated>2013-03-24T19:48:00+01:00</updated><author><name>markos</name></author><id>tag:,2013-03-24:exporting-tagged-items-from-google-reader.html</id><summary type="html">&lt;p&gt;&lt;html&gt;
 &lt;body&gt;
  &lt;div&gt;
   &lt;p&gt;
    Google Reader for me was never just a way to plow through a large number of feeds, but also a database of important articles that I lovingly annotated with tags and notes when they still existed. Apparently I was in minority, judging by Reader clients and more importantly its own exporting tools which lets you take away most of your stuff, but not tagged items themselves.
   &lt;/p&gt;
   &lt;p&gt;
    Hence I wrote a quick and dirty Python script which allows you to do just that using
    &lt;a href="https://pypi.python.org/pypi/libgreader"&gt;
     libgreader
    &lt;/a&gt;
    . You can find
    &lt;a href="https://github.com/samastur/GReader-hoover"&gt;
     it on Github
    &lt;/a&gt;
    and it has few other features like exporting all feed articles. Who knows how long Feedburner will be around so next step will be resolving those links.
   &lt;/p&gt;
   &lt;p&gt;
    My current backup amounts to almost 500MB so script is obviously useful to me. Hopefully it is also to others.  If you find bugs or data that is not exported, but should be, please do let me know.
   &lt;/p&gt;
   &lt;p&gt;
    I am also looking for a good alternative that is
    &lt;strong&gt;
     not hosted only
    &lt;/strong&gt;
    service, supports archiving and can process most feeds. Currently I am biased to modifying Newsblur to support tagging and running my own instance, but I would definitely prefer to avoid this work if possible.
   &lt;/p&gt;
  &lt;/div&gt;
 &lt;/body&gt;
&lt;/html&gt;&lt;/p&gt;</summary></entry><entry><title>EuroPython submission deadline is around the corner</title><link href="/europython-submission-deadline-is-around-the-corner.html" rel="alternate"></link><updated>2010-04-26T20:28:00+02:00</updated><author><name>markos</name></author><id>tag:,2010-04-26:europython-submission-deadline-is-around-the-corner.html</id><summary type="html">&lt;p&gt;&lt;html&gt;
 &lt;body&gt;
  &lt;div&gt;
   &lt;p&gt;
    April is about to end and with it also the deadline to
    &lt;a href="http://www.europython.eu/talks/cfp/"&gt;
     submit your EuroPython talk
    &lt;/a&gt;
    . I thought about submitting a proposal, but realized it would be nuts to do so with my current workload.
   &lt;/p&gt;
   &lt;p&gt;
    It would also be nuts not to go and if you are a European (or not) Python developer you owe it to yourself to come.
   &lt;/p&gt;
   &lt;p&gt;
    I go to a few conferences every year and each has its own personality. It is sometimes hard to point at what makes them (feel) different, but they just are. I like many, but only EuroPython, which I regretfully had to miss last year, feels like home.
   &lt;/p&gt;
   &lt;p&gt;
    That’s why I decided to volunteer this year. It’s a way to give a little bit back, like cleaning dishes when you visit mom.
   &lt;/p&gt;
   &lt;p&gt;
    So do submit your talk and come. It won’t be the same without you.
   &lt;/p&gt;
   &lt;div class="zemanta-pixie"&gt;
    &lt;a class="zemanta-pixie-a" href="http://reblog.zemanta.com/zemified/3f88ab5e-3d0f-410e-957f-6828cee4d640/" title="Reblog this post [with Zemanta]"&gt;
     &lt;img alt="Reblog this post [with Zemanta]" class="zemanta-pixie-img" src="http://img.zemanta.com/reblog_e.png?x-id=3f88ab5e-3d0f-410e-957f-6828cee4d640"/&gt;
    &lt;/a&gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/body&gt;
&lt;/html&gt;&lt;/p&gt;</summary></entry><entry><title>Going home</title><link href="/going-home.html" rel="alternate"></link><updated>2008-07-10T10:02:00+02:00</updated><author><name>markos</name></author><id>tag:,2008-07-10:going-home.html</id><summary type="html">&lt;p&gt;&lt;html&gt;
 &lt;body&gt;
  &lt;div&gt;
   &lt;p&gt;
    EuroPython 2008 is over. I packed and now I am waiting to leave for the airport to catch afternoon flight back home. Sadly I don’t have time to attend sprints and since I only recently started to write python again, I probably wouldn’t be of much use anyhow.
   &lt;/p&gt;
   &lt;p&gt;
    Conference itself was great. Smaller than web conferences I usually attend with a more friendly, homey feeling, but with plenty of excellent talks where I learned a lot. I also met a bunch of friendly interesting people and had in general a wonderful time.
   &lt;/p&gt;
   &lt;p&gt;
    It was also interesting to compare the whole experience with other conferences I go to. Apple is popular, but there are fewer
    &lt;a class="zem_slink" href="http://en.wikipedia.org/wiki/Macintosh" rel="wikipedia" title="Macintosh"&gt;
     Macs
    &lt;/a&gt;
    than at web events.
    &lt;a class="zem_slink" href="http://www.ubuntu.com/" rel="homepage" title="Ubuntu (operating system)"&gt;
     Ubuntu
    &lt;/a&gt;
    seems to completely dominate
    &lt;a class="zem_slink" href="http://en.wikipedia.org/wiki/Linux" rel="wikipedia" title="Linux"&gt;
     Linux
    &lt;/a&gt;
    crowd (me included), since it was the only distribution I actually have seen and Windows is in minority. Everyone is much more willing to participate to the point, where sadly not all who wanted to present a Lightning talk on last day had the opportunity to do so.
   &lt;/p&gt;
   &lt;p&gt;
    I certainly hope to attend EuroPython 2009, which will be in Birmingham around this time next year. At the end I also have a present. Yesterday I got a license for
    &lt;a class="zem_slink" href="http://www.wingware.com" rel="homepage" title="Wing IDE"&gt;
     Wing IDE
    &lt;/a&gt;
    Professional and since I don’t need one, I’ll give it to the first person who expresses a wish to have it in comments and leaves his/her email address in relevant part of comment form.
   &lt;/p&gt;
   &lt;p&gt;
    &lt;strong&gt;
     Update
    &lt;/strong&gt;
    : License is gone, sent to a new owner.
   &lt;/p&gt;
   &lt;div class="zemanta-pixie" style="margin-top: 10px; height: 15px;"&gt;
    &lt;a class="zemanta-pixie-a" href="http://reblog.zemanta.com/zemified/a6262891-3f96-4b97-8bf6-949cb83cba0e/" title="Zemified by Zemanta"&gt;
     &lt;img alt="Zemanta Pixie" class="zemanta-pixie-img" src="http://img.zemanta.com/reblog_e.png?x-id=a6262891-3f96-4b97-8bf6-949cb83cba0e" style="border: medium none; float: right;"/&gt;
    &lt;/a&gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/body&gt;
&lt;/html&gt;&lt;/p&gt;</summary></entry><entry><title>G1G1 is in the house</title><link href="/g1g1-is-in-the-house.html" rel="alternate"></link><updated>2008-01-07T23:22:00+01:00</updated><author><name>markos</name></author><id>tag:,2008-01-07:g1g1-is-in-the-house.html</id><summary type="html">&lt;p&gt;&lt;html&gt;
 &lt;body&gt;
  &lt;div&gt;
   &lt;p&gt;
    It’s here. After months of hoping and weeks of waiting, little white-green computer is finally here, on my desk:
    &lt;br/&gt;
    &lt;a class="imageL" href="http://www.marela.si/photos/20257"&gt;
     &lt;img alt="XO" src="http://static.marela.si/users0/markos/2/c6yTQyOe_QdCrt4q55QsRpZBUO0.jpg"/&gt;
    &lt;/a&gt;
    &lt;a class="imageL" href="http://www.marela.si/photos/20256"&gt;
     &lt;img alt="XO with Powerbook G4" src="http://static.marela.si/users0/markos/2/1L7zJkVx0em0P8PaV3Y_-cNX788.jpg"/&gt;
    &lt;/a&gt;
   &lt;/p&gt;
   &lt;p style="clear:left"&gt;
    It’s too early for anything but first impressions, but unlike some people mine are completely positive. This doesn’t mean everything works. It doesn’t like WPA-enabled wifi in our flat. Some parts are a bit flaky or unfinished. But on the whole I haven’t found problems yet that weren’t already documented on project’s wiki and in general it certainly works better than I expected.
   &lt;/p&gt;
   &lt;p&gt;
    Time will tell if this infatuation will last, although I don’t see why not, since it offers everything I hoped for my projects. As a side note, if you live in Slovenia and someone sends you G1G1, be prepared to pay VAT also for the one that was bought abroad and shipped elsewhere. Yet another thing beyond my comprehension.
   &lt;/p&gt;
  &lt;/div&gt;
 &lt;/body&gt;
&lt;/html&gt;&lt;/p&gt;</summary></entry><entry><title>bisect and subpar modules</title><link href="/bisect-and-sub-par-modules.html" rel="alternate"></link><updated>2006-12-07T23:36:00+01:00</updated><author><name>markos</name></author><id>tag:,2006-12-07:bisect-and-sub-par-modules.html</id><summary type="html">&lt;p&gt;&lt;html&gt;
 &lt;body&gt;
  &lt;div&gt;
   &lt;p&gt;
    I was talking to a colleague yesterday, who’s a recent Python convert and he was explaining to me which parts of Python are not to his liking. Mostly he had reasonable objections.
   &lt;/p&gt;
   &lt;p&gt;
    I can understand his wish for strong typing, but since lack of it is not a problem that affected me yet, I’m not bothered by it. I’ll take his word that objects pickled on Windows are not transferable to Linux and that certainly can suck. But it was probably the smallest problem that resonated the strongest with me, since it was something that has annoyed me previously.
   &lt;/p&gt;
   &lt;p&gt;
    Bisect module doesn’t let you specify comparison function. It obviously doesn’t need to, since you can define your own comparison methods on your classes, but still, it would be nice if its documentation included a hint for those who won’t look at module’s code or think of simply trying. You know, people like me.
   &lt;/p&gt;
   &lt;p&gt;
    It got me thinking that I don’t find all modules in standard library of the same quality and I suspect I’m not the only one. I don’t mean to or honestly can disparage anyone, since I haven’t seen any code in standard library that would be worse than mine.
   &lt;/p&gt;
   &lt;p&gt;
    Still, which modules do you think would benefit from some work and how could an eager person, with some time on his hands, help them improve?
   &lt;/p&gt;
  &lt;/div&gt;
 &lt;/body&gt;
&lt;/html&gt;&lt;/p&gt;</summary></entry><entry><title>Henry the Adequate</title><link href="/henry-the-adequate.html" rel="alternate"></link><updated>2006-05-22T20:17:00+02:00</updated><author><name>markos</name></author><id>tag:,2006-05-22:henry-the-adequate.html</id><summary type="html">&lt;p&gt;&lt;html&gt;
 &lt;body&gt;
  &lt;div&gt;
   &lt;p&gt;
    Finally somebody who makes
    &lt;a href="http://weblog.henrytheadequate.com/?p=348"&gt;
     sense
    &lt;/a&gt;
    .
   &lt;/p&gt;
  &lt;/div&gt;
 &lt;/body&gt;
&lt;/html&gt;&lt;/p&gt;</summary></entry><entry><title>Python's most valued</title><link href="/pythons-most-valued.html" rel="alternate"></link><updated>2006-05-04T11:53:00+02:00</updated><author><name>markos</name></author><id>tag:,2006-05-04:pythons-most-valued.html</id><summary type="html">&lt;p&gt;&lt;html&gt;
 &lt;body&gt;
  &lt;div&gt;
   &lt;p&gt;
    Yesterday was a lovely sunny day.
    &lt;a href="http://www.trepca.si/blog/"&gt;
     Sebastjan
    &lt;/a&gt;
    and I were sunbathing at a nearby cafe, sipping juice and talking as we often do about Python related things.
   &lt;/p&gt;
   &lt;p&gt;
    I noted how I’d hate to see
    &lt;a href="http://www.effbot.org/"&gt;
     Fredrik Lundh
    &lt;/a&gt;
    being swallowed by the black hole of Google, where too often good people go to never hear from them again. I simply can’t seem to write anything substantial in Python these days without relying on at least a piece of Fredrik’s code.
   &lt;/p&gt;
   &lt;p&gt;
    Sebastjan doesn’t share my pessimism and he might be right. Forgetting my possibly unsubstantiated fears for a moment, which Pythonista’s loss would in your opinion hurt our beloved language the most?
   &lt;/p&gt;
  &lt;/div&gt;
 &lt;/body&gt;
&lt;/html&gt;&lt;/p&gt;</summary></entry><entry><title>Python on series 60</title><link href="/python-on-series-60.html" rel="alternate"></link><updated>2006-04-20T10:24:00+02:00</updated><author><name>markos</name></author><id>tag:,2006-04-20:python-on-series-60.html</id><summary type="html">&lt;p&gt;&lt;html&gt;
 &lt;body&gt;
  &lt;div&gt;
   &lt;p&gt;
    I knew it exists, but I haven’t looked into
    &lt;a href="http://www.forum.nokia.com/python"&gt;
     Python on series 60
    &lt;/a&gt;
    until yesterday and I wish I did so sooner. My mind is just flooded with ideas of what to do and I can easily see myself wasting lots of time playing with it. I do wish it was possible to build stand-alone applications, which wouldn’t require a separate installation of Python. As such I believe series 60 Python is more or less limited to prototyping and personal use.
   &lt;/p&gt;
   &lt;p&gt;
    There’s one thing that is a problem for an old goat like me (over 30 and loving it). It’s a pain in the ass to type anything substantial on mobile phone and although some new phones (like Nokia N70) have predictive dictionary for my language, lots of them including mine don’t.
   &lt;/p&gt;
   &lt;p&gt;
    I do have an idea on how to tackle this problem. Most of us have a vocabulary of few thousand words (unlike Shakespeare, who I’m told used 36 thousand of them), but we only use few hundred of them in our everyday life. Therefore if my text input heavy applications would continuously build a dictionary of words typed by user, they would fairly soon get a usable predictive dictionary for this particular user.
   &lt;/p&gt;
   &lt;p&gt;
    There are downsides. You start with nothing and there’s a problem of how to build  a dictionary without annoying. You could tackle this by staying in learn-only mode until your dictionary-hit ratio rises above some threshold (80-90%?).
   &lt;/p&gt;
   &lt;p&gt;
    There are also pluses. You get a dictionary that’s much better fitted to your user than a generic one, since it actually has words he uses. That is if I’m not underestimating dictionaries used in modern mobiles.
   &lt;/p&gt;
   &lt;p&gt;
    What would make it even better is if such dictionary would be standardized so any application could use it.
   &lt;/p&gt;
   &lt;p&gt;
    &lt;strong&gt;
     Update: I was wrong, you
    &lt;/strong&gt;
    &lt;strong&gt;
     &lt;a href="http://www.mobilenin.com/pys60/info_standalone_application.htm"&gt;
      can
     &lt;/a&gt;
    &lt;/strong&gt;
    &lt;strong&gt;
     make a completely stand-alone application in Python. Sweet.
     &lt;br/&gt;
    &lt;/strong&gt;
   &lt;/p&gt;
  &lt;/div&gt;
 &lt;/body&gt;
&lt;/html&gt;&lt;/p&gt;</summary></entry><entry><title>Updated sgmllib</title><link href="/updated-sgmllib.html" rel="alternate"></link><updated>2006-04-01T15:05:00+02:00</updated><author><name>markos</name></author><id>tag:,2006-04-01:updated-sgmllib.html</id><summary type="html">&lt;p&gt;&lt;html&gt;
 &lt;body&gt;
  &lt;div&gt;
   &lt;p&gt;
    I
    &lt;a href="sgmllibpy-parser-woes.html"&gt;
     wrote
    &lt;/a&gt;
    about a sgmllib problem a few days ago. I still may be a dolt and my code certainly needed fixing, but the bug remained nevertheless.
   &lt;/p&gt;
   &lt;p&gt;
    Hence I’ve made some small changes to sgmllib that fix problems I’ve had. New version, which passes all unit tests included in Python distribution, can be found
    &lt;a href="http://markos.gaivo.net/examples/sgmllib/sgmllib.py" title="fixed sgmllib.py"&gt;
     here
    &lt;/a&gt;
    and I’d really appreciate if users of sgmllib could give it a go (that includes users of htmllib and BeautifulSoup).
   &lt;/p&gt;
   &lt;p&gt;
    &lt;strong&gt;
     Update:
    &lt;/strong&gt;
    As suggested I’ve added an
    &lt;a href="http://markos.gaivo.net/examples/sgmllib/test_sgmllib.py" title="Test cases for new library"&gt;
     updated version
    &lt;/a&gt;
    of test_sgmllib.py, which includes an example where the old library fails and new one doesn’t.
   &lt;/p&gt;
   &lt;p&gt;
    &lt;strong&gt;
     Update 2
    &lt;/strong&gt;
    : It
    &lt;a href="sgmllibpy-parser-woes.html"&gt;
     seems
    &lt;/a&gt;
    this is valid, even required SGML behavior.
   &lt;/p&gt;
  &lt;/div&gt;
 &lt;/body&gt;
&lt;/html&gt;&lt;/p&gt;</summary></entry><entry><title>sgmllib.py parser woes</title><link href="/sgmllibpy-parser-woes.html" rel="alternate"></link><updated>2006-03-28T20:51:00+02:00</updated><author><name>markos</name></author><id>tag:,2006-03-28:sgmllibpy-parser-woes.html</id><summary type="html">&lt;p&gt;&lt;html&gt;
 &lt;body&gt;
  &lt;div&gt;
   &lt;p&gt;
    Does anybody have problems with sgmllib.py?
   &lt;/p&gt;
   &lt;p&gt;
    After I spent way too much time hunting a bug in my code, I gave up, read the
    &lt;em&gt;
     goahead
    &lt;/em&gt;
    function in
    &lt;em&gt;
     sgmllib.py
    &lt;/em&gt;
    and I’m certain now that its parser is broken.
   &lt;/p&gt;
   &lt;p&gt;
    Let’s say you’re handling a web page with inline Javascript code which also includes HTML tags. Even if you use a
    &lt;em&gt;
     setliteral
    &lt;/em&gt;
    method to skip processing data inside
    &lt;em&gt;
     &amp;lt;script&amp;gt;
    &lt;/em&gt;
    tags,
    &lt;em&gt;
     sgmllib.py
    &lt;/em&gt;
    will start doing so when it encounters first &amp;lt;/. It interprets this as a start of an end tag and tries  to close it. Even though code handles cases of known and unknown tags, it fails to do the right thing because it simply doesn’t expect a scenario where this isn’t a tag at all.
   &lt;/p&gt;
   &lt;p&gt;
    The other possibility is that I’m simply a dolt who should do stuff like this only when rested. By the way, where’s the proper place to make an ass out of myself complaining about standard library?
   &lt;/p&gt;
  &lt;/div&gt;
 &lt;/body&gt;
&lt;/html&gt;&lt;/p&gt;</summary></entry><entry><title>Universal Encoding Detector</title><link href="/universal-encoding-detector.html" rel="alternate"></link><updated>2006-03-17T22:22:00+01:00</updated><author><name>markos</name></author><id>tag:,2006-03-17:universal-encoding-detector.html</id><summary type="html">&lt;p&gt;&lt;html&gt;
 &lt;body&gt;
  &lt;div&gt;
   &lt;p&gt;
    Few months ago, while exporting vCards from Apple’s Address Book (which uses UTF-16 instead of to me more common UTF-8), I discovered that there’s really no general agreement on which encoding should be used for storing vCards. It was quite a disheartening discovery, since you can’t get this information from a filesystem and it’s difficult to transform encoding to a uniform one, if you don’t know the encoding of the source.
   &lt;/p&gt;
   &lt;p&gt;
    I decided to tackle this problem once other problems were solved and I’m happy to say my procrastination payed off. Mark Pilgrim wrote another excellent
    &lt;a href="http://chardet.feedparser.org/" title="Universal Encoding Detector"&gt;
     module
    &lt;/a&gt;
    which solves my problem better than I ever could.
   &lt;/p&gt;
   &lt;p&gt;
    Universal Encoding Detector is a python port of code used by Mozilla to accomplish the same thing and is really very simple to use. Obviously it can’t be perfect since it’s not possible detect encoding completely reliably. But it works quite well and if you need such functionality, you should really give it a try.
   &lt;/p&gt;
   &lt;p&gt;
    And people say laziness doesn’t pay off.
   &lt;/p&gt;
  &lt;/div&gt;
 &lt;/body&gt;
&lt;/html&gt;&lt;/p&gt;</summary></entry><entry><title>PyCon</title><link href="/pycon.html" rel="alternate"></link><updated>2006-02-25T09:08:00+01:00</updated><author><name>markos</name></author><id>tag:,2006-02-25:pycon.html</id><summary type="html">&lt;p&gt;&lt;html&gt;
 &lt;body&gt;
  &lt;div&gt;
   &lt;p&gt;
    The worst thing about PyCon are all those posts from people who got to go.
   &lt;/p&gt;
   &lt;p&gt;
    Envy is a bitch.
   &lt;/p&gt;
  &lt;/div&gt;
 &lt;/body&gt;
&lt;/html&gt;&lt;/p&gt;</summary></entry><entry><title>Beloved python filter</title><link href="/beloved-python-filter.html" rel="alternate"></link><updated>2005-12-17T23:07:00+01:00</updated><author><name>markos</name></author><id>tag:,2005-12-17:beloved-python-filter.html</id><summary type="html">&lt;p&gt;&lt;html&gt;
 &lt;body&gt;
  &lt;div&gt;
   &lt;p&gt;
    Is it just me or does anybody else find it easier to write:
   &lt;/p&gt;
   &lt;p&gt;
    &lt;code&gt;
     elmList = filter( len, elmList )
    &lt;/code&gt;
   &lt;/p&gt;
   &lt;p&gt;
    then
   &lt;/p&gt;
   &lt;p&gt;
    &lt;code&gt;
     elmList = [ x for x in elmList if len(x) ]
    &lt;/code&gt;
   &lt;/p&gt;
   &lt;p&gt;
    I don’t know why, but if I want to use the second form, I always have to look it up
    &lt;a href="http://www.artima.com/weblogs/viewpost.jsp?thread=98196"&gt;
     somewhere
    &lt;/a&gt;
    . I know
    &lt;em&gt;
     filter
    &lt;/em&gt;
    and friends are frowned upon, but I can’t stop liking them.
   &lt;/p&gt;
  &lt;/div&gt;
 &lt;/body&gt;
&lt;/html&gt;&lt;/p&gt;</summary></entry><entry><title>Dreaming about GIL</title><link href="/dreaming-about-gil.html" rel="alternate"></link><updated>2005-10-11T15:38:00+02:00</updated><author><name>markos</name></author><id>tag:,2005-10-11:dreaming-about-gil.html</id><summary type="html">&lt;p&gt;&lt;html&gt;
 &lt;body&gt;
  &lt;div&gt;
   &lt;p&gt;
    I’ve been thinking about Python’s global interpreter lock (GIL) again. Since I’m a glutton for punishment and haven’t been crucified in a week, you get to hear about it too.
   &lt;/p&gt;
   &lt;p&gt;
    Has anybody thought and wrote about avoiding GIL until you need it? What I mean is creating and using GIL only when you start using code that might not be thread-safe.
   &lt;/p&gt;
   &lt;p&gt;
    So, what’s wrong with this idea?
   &lt;/p&gt;
   &lt;p&gt;
    Things that come to my mind:
   &lt;/p&gt;
   &lt;ul&gt;
    &lt;li&gt;
     garbage collector is not thread-safe
    &lt;/li&gt;
    &lt;li&gt;
     majority of interesting modules are not thread-safe, so there would be little ROI
    &lt;/li&gt;
    &lt;li&gt;
     dynamic nature of Python means you can’t know in advance if you’ll need GIL and it would a bitch to fall back when you do
    &lt;/li&gt;
    &lt;li&gt;
     …
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;p&gt;
    I guess it’s just a really stupid idea.
   &lt;/p&gt;
  &lt;/div&gt;
 &lt;/body&gt;
&lt;/html&gt;&lt;/p&gt;</summary></entry><entry><title>Best tool for the job</title><link href="/best-tool-for-the-job.html" rel="alternate"></link><updated>2005-09-28T20:57:00+02:00</updated><author><name>markos</name></author><id>tag:,2005-09-28:best-tool-for-the-job.html</id><summary type="html">&lt;p&gt;&lt;html&gt;
 &lt;body&gt;
  &lt;div&gt;
   &lt;p&gt;
    Sometimes, I really am an idiot. A couple of years ago I was involved in development of a front-end Zope application for a major Slovenian ISP with more than 100 000 users. No matter what we did, Zope just wasn’t fast. In fact it was so slow, it was soon abandoned for one more suitable solution.
   &lt;/p&gt;
   &lt;p&gt;
    The failure of our project was largely my fault, because I haven’t made sure Zope was a good fit for what we wanted. I learned a lot, but it also left a bitter aftertaste and a question, why are people using it?
   &lt;/p&gt;
   &lt;p&gt;
    The obvious answer is of course, because it DOES fit their needs. It’s just that they are not building a site or an application that needs to handle few hundred simultaneous requests. They handle a few at most, so Zope or Plone or what-have-you is more than speedy enough and it’s their features that count.
   &lt;/p&gt;
   &lt;p&gt;
    It really took me awhile to grasp this and it only became really clear this week, after reading a little
    &lt;a href="http://www.larsen-b.com/Article/217.html"&gt;
     Plone benchmark
    &lt;/a&gt;
    and having a discussion with
    &lt;a href="http://seba.antiwisdom.com" title="Sebastjan's blog"&gt;
     Sebastjan
    &lt;/a&gt;
    about slowness of Slovenian sites.
   &lt;/p&gt;
   &lt;p&gt;
    On a positive note, we generate pages in less than 6 ms now and can reduce it even further, if needed.
   &lt;/p&gt;
  &lt;/div&gt;
 &lt;/body&gt;
&lt;/html&gt;&lt;/p&gt;</summary></entry><entry><title>No language feature is optional</title><link href="/no-language-feature-is-optional.html" rel="alternate"></link><updated>2005-09-21T11:58:00+02:00</updated><author><name>markos</name></author><id>tag:,2005-09-21:no-language-feature-is-optional.html</id><summary type="html">&lt;p&gt;&lt;html&gt;
 &lt;body&gt;
  &lt;div&gt;
   &lt;p&gt;
    Until recently I’ve been using Python 2.3.x almost exclusively and I thought it was about time I get more familiar with what 2.4 series has to offer. I’ve skimmed the list of new features when point zero version came out and found some things that I like (e.g sets) and some that I disliked (e.g. decorators).
   &lt;/p&gt;
   &lt;p&gt;
    So, this time I invested a bit more time to actually read and understand what was on offer and how these features came about. I still haven’t found a need or a sympathy for decorators, although I can see why some people want them. Personally, I believe they’ll more likely be a cause for less readable and harder to understand Python code than they prove to be useful.
   &lt;/p&gt;
   &lt;p&gt;
    I still think Python is a wonderful language, but gone are the days when I was looking forward to each release and goodness it brought. These days I’m afraid to look and discover another feature that helps more with keeping habits from other languages than adding something new and genuinely useful.
   &lt;/p&gt;
   &lt;p&gt;
    I like minimalism in all things and therefore see every new feature as a burden that should be more than offset by its usefulness. I’m not a language designer and hence can’t really say or tell if Python is going down the wrong track, but there is something that I find most annoying.
   &lt;/p&gt;
   &lt;p&gt;
    I’ve been thinking about languages quite a lot recently; how we use and abuse them and what impact our language proficiency has on our communications. There’s one thing I find very different with programming languages than those used for normal human interaction.
   &lt;/p&gt;
   &lt;p&gt;
    There’s very little optional about them.
   &lt;/p&gt;
   &lt;p&gt;
    It really gets my goat when a language feature is defended as being optional. You may have a choice in using a feature, but you certainly don’t get a choice in learning and understanding its use. Even if you don’t use it yourself, you’ll quite likely have to interact with somebody else’s code, which does and unlike with English, it’s not enough to just get a sense of meaning from its context. You actually have to really understand what it does and hence need to be familiar with feature itself.
   &lt;/p&gt;
   &lt;p&gt;
    It might still be worthwhile to add it, but let’s not pretend when we do that it’s completely optional.
   &lt;/p&gt;
   &lt;p&gt;
    P.S: Isn’t it amazing that after all these years, we still have a global interpreter lock? Wouldn’t it be better if we worked on removing that disgrace?
   &lt;/p&gt;
  &lt;/div&gt;
 &lt;/body&gt;
&lt;/html&gt;&lt;/p&gt;</summary></entry><entry><title>Why I passionately dislike Twisted and Zope</title><link href="/why-i-passionately-dislike-twisted-and-zope.html" rel="alternate"></link><updated>2005-09-08T12:58:00+02:00</updated><author><name>markos</name></author><id>tag:,2005-09-08:why-i-passionately-dislike-twisted-and-zope.html</id><summary type="html">&lt;p&gt;&lt;html&gt;
 &lt;body&gt;
  &lt;div&gt;
   &lt;p&gt;
    I’ve been a Python programmer for more than 6 years now and during most of this time it’s been the language I used professionally. It’s safe to say, I know it fairly well and I’m quite attached to it. I also have to admit that I can’t stand Twisted and Zope.
   &lt;/p&gt;
   &lt;p&gt;
    It’s a continuous wonder for me, why Python community chooses to promote projects that feel most unpythonic to me. I became addicted to Python, because it was a very simple, yet expressive language which lived up to its mantra of making easy things easy and hard things possible.
   &lt;/p&gt;
   &lt;p&gt;
    So what is actually easy with Twisted and Zope? Practically nothing. At least not as long as you don’t dedicate yourself to their use.
   &lt;/p&gt;
   &lt;p&gt;
    You see, Twisted and Zope are not products. They are religions.
   &lt;/p&gt;
   &lt;p&gt;
    They were not built in a way that would make it easy to integrate them with wonderful things others built. It’s not easy to just pick the parts you like and use them elsewhere.
   &lt;/p&gt;
   &lt;p&gt;
    No, like a good disciple you were supposed to study the way they work, use their new vocabulary and dedicate yourself to live within confines of chosen religion. If you do this, then you’ll get some payoff and you might after a while even think you enjoy it.
   &lt;/p&gt;
   &lt;p&gt;
    But you’ll be missing on a hell of a lot of stuff others made and you’ll have to live with limitations of not your choosing. Well, at least not completely.
   &lt;/p&gt;
   &lt;p&gt;
    I guess I wouldn’t find it so distressing, if I didn’t feel Python developers are getting too eager to add new features to please Zope and Twisted developers. Or features that were inspired by these two.
   &lt;/p&gt;
   &lt;p&gt;
    So this language I loved is with each new release becoming ever less clean and beautiful and it’s getting easier and easier to imagine a day, when I’ll switch to some other language as my main development tool.
   &lt;/p&gt;
   &lt;p&gt;
    &lt;em&gt;
     Disclaimer: When I talked about Zope, I actually meant version 2.x, because it was the one I actually used on a project and left me scared badly enough that I can’t make myself to even check X3. I heard it’s better in many regards, but I really don’t care anymore.
    &lt;/em&gt;
   &lt;/p&gt;
   &lt;p&gt;
    I also think developers who created Zope and Twisted are amazing. I just think that their product is, well, unpleasant.
   &lt;/p&gt;
  &lt;/div&gt;
 &lt;/body&gt;
&lt;/html&gt;&lt;/p&gt;</summary></entry></feed>