<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>A notch above a monkey</title><link href="/" rel="alternate"></link><link href="/articles/feeds/django-javascript-web.atom.xml" rel="self"></link><id>/</id><updated>2013-07-11T22:57:00+02:00</updated><entry><title>Laughable Javascript security</title><link href="/laughable-javascript-security.html" rel="alternate"></link><updated>2013-07-11T22:57:00+02:00</updated><author><name>markos</name></author><id>tag:,2013-07-11:laughable-javascript-security.html</id><summary type="html">&lt;p&gt;&lt;html&gt;
 &lt;body&gt;
  &lt;div&gt;
   &lt;p&gt;
    Building a secure web application is not easy, unless you also use 3rd party code such as Facebook’s Like widget in which case it is impossible. What you have is just an illusion of security, a door to abuse that you can’t even check if it is currently closed.
   &lt;/p&gt;
   &lt;p&gt;
    Or that’s what I thought for years. A once substantiated belief that grew into an almost dogmatic certainty until I recently got a chance to revisit it when trying to design a secure Javascript-based web application living inside of a likely untrusted environment.
   &lt;/p&gt;
   &lt;p&gt;
    There are obvious things you can do to protect your application such as delivery over secure connections and use of anonymous functions to sandbox your code from outside interference. However you will probably need to interact with external code at some point in which case is that
    &lt;em&gt;
     XMLHTTPRequest
    &lt;/em&gt;
    object you are using really the built-in one or has it been replaced (cloaked) with an impostor object to perform
    &lt;a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack"&gt;
     the man-in-the-middle attack
    &lt;/a&gt;
    ?
   &lt;/p&gt;
   &lt;p&gt;
    I don’t know of a way to check if an object is untouched. What is sometimes used instead is a
    &lt;em&gt;
     .toString
    &lt;/em&gt;
    method which on functions and methods returns their source unless they are native to browser in which case it returns a string saying so.
   &lt;/p&gt;
   &lt;p&gt;
    Since you can replace any attribute and method on any object some
    &lt;a href="http://stackoverflow.com/questions/6598945/detect-if-function-is-native-to-browser#comment8044242_6599105"&gt;
     go even further
    &lt;/a&gt;
    in search of a certainty and use
    &lt;em&gt;
     .toString
    &lt;/em&gt;
    from the
    &lt;em&gt;
     Function
    &lt;/em&gt;
    object.
   &lt;/p&gt;
   &lt;p&gt;
    At first thought that looked clever until I came up with:
   &lt;/p&gt;
   &lt;ol class="code"&gt;
    &lt;li&gt;
     &lt;code&gt;
      &amp;lt;!DOCTYPE HTML&amp;gt;
     &lt;/code&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      &amp;lt;html lang="en"&amp;gt;
     &lt;/code&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      &amp;lt;head&amp;gt;
     &lt;/code&gt;
    &lt;/li&gt;
    &lt;li class="tab1"&gt;
     &lt;code&gt;
      &amp;lt;meta charset="UTF-8"&amp;gt;
     &lt;/code&gt;
    &lt;/li&gt;
    &lt;li class="tab1"&gt;
     &lt;code&gt;
      &amp;lt;title&amp;gt;Break check if function is native&amp;lt;/title&amp;gt;
     &lt;/code&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      &amp;lt;/head&amp;gt;
     &lt;/code&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      &amp;lt;body&amp;gt;
     &lt;/code&gt;
    &lt;/li&gt;
    &lt;li class="tab1"&gt;
     &lt;code&gt;
      &amp;lt;script&amp;gt;
     &lt;/code&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      (function () {
     &lt;/code&gt;
    &lt;/li&gt;
    &lt;li class="tab1"&gt;
     &lt;code&gt;
      var toS = Function.prototype.toString,
     &lt;/code&gt;
    &lt;/li&gt;
    &lt;li class="tab2"&gt;
     &lt;code&gt;
      pM_str = window.postMessage.toString();
     &lt;/code&gt;
    &lt;/li&gt;
    &lt;li&gt;
    &lt;/li&gt;
    &lt;li class="tab1"&gt;
     &lt;code&gt;
      Function.prototype.toString = function () {
     &lt;/code&gt;
    &lt;/li&gt;
    &lt;li class="tab2"&gt;
     &lt;code&gt;
      return this === window.postMessage ? pM_str : toS.call(this);
     &lt;/code&gt;
    &lt;/li&gt;
    &lt;li class="tab1"&gt;
     &lt;code&gt;
      }
     &lt;/code&gt;
    &lt;/li&gt;
    &lt;li class="tab1"&gt;
     &lt;code&gt;
      window.postMessage = function () { console.log('Fake'); };
     &lt;/code&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      })();
     &lt;/code&gt;
    &lt;/li&gt;
    &lt;li class="tab1"&gt;
     &lt;code&gt;
      &amp;lt;/script&amp;gt;
     &lt;/code&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      &amp;lt;/body&amp;gt;
     &lt;/code&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      &amp;lt;/html&amp;gt;
     &lt;/code&gt;
    &lt;/li&gt;
    &lt;li&gt;
    &lt;/li&gt;
    &lt;li class="download"&gt;
     Download this code:
     &lt;a href="http://markos.gaivo.net/blog/code/nativecheck.txt" title="Download the above code as a text file"&gt;
      /code/nativecheck.txt
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ol&gt;
   &lt;p&gt;
    The code above replaces
    &lt;em&gt;
     Function’s .toString
    &lt;/em&gt;
    method with a one that lies when executed on an also cloaked
    &lt;em&gt;
     window.postMessage
    &lt;/em&gt;
    . Instead of displaying source of the new
    &lt;em&gt;
     postMessage
    &lt;/em&gt;
    it prints whatever browser would print for the original one.
   &lt;/p&gt;
   &lt;p&gt;
    It simultaneously demonstrates how you can cloak native Javascript objects and hide that you are doing it. If you put malicious code into an anonymous function and remove
    &lt;em&gt;
     &amp;lt;script&amp;gt;
    &lt;/em&gt;
    node that added it after it gets executed, then there is no way for scripts loading later to know that it happened. There will be no traces of crime.
   &lt;/p&gt;
   &lt;p&gt;
    It might be difficult to cloak literals like {} and [], but you certainly can their methods so even if your code is wrapped in an anonymous function, it isn’t really secured from outside peeking and poking. Hence you even
    &lt;strong&gt;
     can’t trust your own code
    &lt;/strong&gt;
    .
   &lt;/p&gt;
   &lt;p&gt;
    Turns out that this particular dogma is also true. Depressing.
   &lt;/p&gt;
  &lt;/div&gt;
 &lt;/body&gt;
&lt;/html&gt;&lt;/p&gt;</summary></entry></feed>